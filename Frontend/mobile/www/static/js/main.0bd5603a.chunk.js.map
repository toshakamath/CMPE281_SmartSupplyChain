{"version":3,"sources":["common/CustomTable.jsx","Dashboard.jsx","common/Navbar.jsx","common/Layout.jsx","mock_data/customer.js","InfraManager/InfraDashboard.jsx","IndividualSensor.jsx","InfraManager/InfraWarehouse.jsx","IOTSupport/SupportDashboard.jsx","IOTSupport/SupportWarehouse.jsx","Sensors.jsx","Profile.jsx","mock_data/warehouse.js","Warehouse.jsx","LoggedInRoutes.jsx","Login.jsx","Register.jsx","App.js","reportWebVitals.js","index.js"],"names":["CustomTable","props","state","rows_array","this","title","Table","xs","hover","header","map","hr","trows","r","onClick","e","handleRowClick","React","Component","Dashboard","searchWarehouse","modalToggle","preventDefault","setState","modal","deleteToggle","deleteModal","collapse","isOpen","console","log","target","history","push","pathname","name","onMarkerClick","marker","h","split","activeMarker","showTooltip","selectedMarkerInfo","status","onToolTipClose","addWarehouseSubmit","deleteWarehouseSubmit","onMapClick","table_header","table_data","markerData","id","location","lat","lng","orders","selectedLocation","role","localStorage","getItem","chart_data","Container","className","fluid","Form","Row","Col","md","FormGroup","Input","placeholder","Button","style","position","width","height","google","initialCenter","zoom","obj","index","parseFloat","visible","onClose","Badge","color","Card","CardBody","ButtonGroup","Modal","toggle","ModalHeader","ModalBody","onSubmit","Label","for","type","value","ModalFooter","GoogleApiWrapper","apiKey","withRouter","NavBar","profileToggle","handleLogout","clear","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","to","divider","Layout","children","customerJson","InfraDashboard","grabAllWarehouse","warehouses","forEach","customer","tmp","ware","concat","loc","searchBarValue","centerLocation","grabCustomer","cust","length","customerTable","handleCustomerRowClick","isCustomerView","selectedCustomer","handleWarehouseRowClick","backToCustomer","handleSearchChange","customerHeader","onChange","center","IndividualSensor","pages","selected_sensor","scope","Pagination","aria-label","PaginationItem","PaginationLink","first","previous","next","last","SupportWarehouse","addSensorToggle","addSensorModal","addSensorSubmit","manageSensorToggle","manageSensorModal","manageOrderToggle","manageOrderModal","handleAddSensorChange","addSensor","sensorType","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","RADIAN","Math","PI","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","warehouseId","warehouseName","individualSensorId","temperature","threshold","test","temperature_header","pieData","COLORS","CardTitle","tag","data","dataKey","stroke","domain","CardText","labelLine","label","entry","SupportDashboard","customer_data","customer_marker","Sensors","uv","pv","amt","sensor_header","CardSubtitle","Profile","src","class","borderless","warehouseJSON","sensorId","Warehouse","manageIndividualSensor","selectedSensor","orderPages","orderHistory","isMobile","LoggedInRoutes","path","component","InfraWarehouse","render","checkRoles","Login","handleChange","submitLogin","username","pass","setItem","Register","registerSubmit","email","password","App","createBrowserHistory","forceRefresh","isLoggedIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bd5603a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Col, Form,\n    FormGroup, Label, Input,\n    Button, Row, Table, Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle\n  } from 'reactstrap';\n\n  class CustomTable extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              rows_array: []\n          }\n      }\n\n      componentDidMount() {\n          // loop through props and convert to rows\n      }\n\n      render() {\n          return(\n              <div>\n                <h3>{this.props.title}</h3>    \n                <Table xs=\"10\" hover={true}>\n                    <thead>\n                    <tr>\n                        {\n                            this.props.header.map((hr) => {\n                                return(\n                                    <th>{hr}</th>\n                                );\n                            })\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.trows.map((r) => {\n                                // const tmp = [];\n                                // r.forEach(i => {\n                                //     tmp.add(<t>)\n                                // });\n                                return(\n                                <tr onClick={(e) => this.props.handleRowClick(e, r)}>\n                                    <td>{r[0]}</td>\n                                    <td>{r[1]}</td>\n                                    <td>{r[2]}</td>\n                                    <td>{r[3]}</td>\n                                    <td>{r[4]}</td>\n                                </tr>);\n                            })\n                        }\n                    </tbody>\n                </Table>\n            </div>\n          );\n      }\n\n  }\n\n  export default CustomTable;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    ButtonGroup, \n  } from 'reactstrap';\nimport { useMediaQuery, MediaQuery } from 'react-responsive';\nimport CustomTable from \"./common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport Geocode from \"react-geocode\";\n\n\n class Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            isOpen: false,\n            table_header: [],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: [{\n                id : \"1\",\n                location: {\n                    lat: 40.854885,\n                    lng: -88.081807},\n                status : \"operational\",\n                orders: 20\n            },\n            {\n                id : \"2\",\n                location: {\n                    lat: 30.266666,\n                    lng: -97.733330},\n                status : \"operational\",\n                orders: 5\n            },\n            {\n                id : \"3\",\n                location: {\n                    lat: 38.854885,\n                    lng: -88.081807},\n                status : \"operational\",\n                orders: 100\n            },\n            {\n                id : \"4\",\n                location: {\n                    lat: 37.773972,\n                    lng: -122.431297},\n                status : \"error\",\n                orders: 0\n            },\n            {\n                id : \"5\",\n                location: {\n                    lat: 40.730610 ,\n                    lng: -73.935242},\n                status : \"operational\",\n                orders: 19\n            }],\n            deleteModal: false,\n            selectedLocation: {\n                lat: \"\",\n                lng: \"\"\n            }\n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n        if (role === 'manager' || role === 'support') {\n            // show customers\n            console.log('manager or support!');\n            this.chart_data = [\n                [\"Customer1\", \"Data\", \"Data\"],\n                [\"Customer1\", \"Data\", \"Data\"],\n                [\"Customer1\", \"Data\", \"Data\"],\n                [\"Customer1\", \"Data\", \"Data\"],\n                [\"Customer1\", \"Data\", \"Data\"],\n            ];\n        } else if (role === 'supplier') {\n            // show current user warehouses\n            console.log('supplier!');\n        }\n\n        this.setState({\n            table_header : [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data : [\n                [\"Alpha\", \"20\", \"Texas\", \"Operational\"],\n                [\"Bravo\", \"5\", \"Nevada\", \"Operational\"],\n                [\"Charlie\", \"100\", \"New York\", \"Sensor Issue\"],\n                [\"Delta\", \"0\", \"San Francisco\", \"Operational\"],\n                [\"Epsilon\", \"19\", \"Kansas\", \"Operational\"],\n                [\"Foxtrot\", \"4\", \"Kansas\", \"No Sensors Detected\"]\n            ]\n        });\n        // grab all warehouse in user's home region and load on map\n        // default detailed warehouse is first on the list \n        // run a condition check on role\n        // Manager and IOT Support will get table of customer\n    }\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n    }\n\n    modalToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    deleteToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            deleteModal: !this.state.deleteModal\n        });\n    }\n\n    collapse = (e) => {\n        e.preventDefault();\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n        this.props.history.push({\n            pathname: '/warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n\n    }\n\n    onMarkerClick = (props, marker) => {\n        console.log(props);\n        let h = props.name.split(\" \");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1]\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        console.log(e);\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    addWarehouseSubmit = () => {\n        // use react geocode to convert address to lat/lng\n        // Geocode.fromAddress(\"address\").then(\n        //     (response) => {\n        //         const { lat, lng } = response.results[0].geometry.location;\n        //         console.log(lat, lng);\n        //     },\n        //     (error) => {\n        //         console.log(error);\n        //     }\n        // );\n    }\n\n    deleteWarehouseSubmit = () => {\n        // delete warehouse from the network for the specific customer\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        console.log(e);\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n\n\n    render () {\n        return(\n                <Container className=\"pt-2\" fluid={true}>\n                    <Form>\n                        <Row>\n                            <Col md=\"7\" xs=\"9\">\n                            <FormGroup>\n                                <Input name=\"search\" id=\"search\" placeholder=\"Enter a address, zip code or city....\" />\n                            </FormGroup>\n                            </Col>\n                            <Col md=\"1\" xs=\"1\">\n                            <Button onClick={this.collapse}>Submit</Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs= \"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                initialCenter={{\n                                    lat: 40.854885,\n                                    lng: -88.081807\n                                }}\n                                onClick={this.onMapClick}\n                                zoom={14}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.id} ${obj.status}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"9\">\n                                            <h2>List of Warehouses</h2>\n                                        </Col>\n                                        <Col md=\"1\">\n                                            <ButtonGroup>\n                                                <Button onClick={this.modalToggle}>Add</Button>\n                                                <Button onClick={this.deleteToggle}>Delete</Button>\n                                            </ButtonGroup>\n                                        </Col>\n                                    </Row>\n                                    <Table xs=\"10\" hover={true}>\n                                        <thead>\n                                        <tr>\n                                            {\n                                                this.state.table_header.map((hr) => {\n                                                    return(\n                                                        <th>{hr}</th>\n                                                    );\n                                                })\n                                            }\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                this.state.table_data.map((r) => {\n                                                    return(\n                                                    <tr onClick={(e) => this.handleRowClick(e, r)}>\n                                                        <td>{r[0]}</td>\n                                                        <td>{r[1]}</td>\n                                                        <td>{r[2]}</td>\n                                                        <td>{r[3]}</td>\n                                                        <td>{r[4]}</td>\n                                                    </tr>);\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Modal isOpen={this.state.deleteModal} toggle={this.deleteToggle}>\n                        <ModalHeader toggle={this.deleteToggle}>Delete Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.deleteWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"select\" name=\"warehouse_delete\">\n                                        <option value=\"alpha\">Alpha</option>\n                                        <option value=\"bravo\">Bravo</option>\n                                        <option value=\"charlie\">Charlie</option>\n                                        <option value=\"delta\">Delta</option>\n                                        <option value=\"epsilon\">Epsilon</option>\n                                        <option value=\"foxtrot\">Foxtrot</option>\n                                    </Input>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>{' '}\n                            <Button color=\"primary\" onClick={this.deleteToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n\n                    <Modal isOpen={this.state.modal} toggle={this.modalToggle}>\n                        <ModalHeader toggle={this.modalToggle}>Add Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.addWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Name here...\" />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label>Address</Label>\n                                    <Input name=\"address\"/>\n                                    <Row>\n                                        <Col>\n                                            <Label>City</Label>\n                                            <Input name=\"city\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>State</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>Zipcode</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                    </Row>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>{' '}\n                            <Button color=\"danger\" onClick={this.modalToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </Container>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(Dashboard));","import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Dropdown, DropdownItem, DropdownToggle, DropdownMenu\n  } from 'reactstrap';\n  import {withRouter, Link} from 'react-router-dom'; \n\nclass NavBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileToggle: false\n        }\n    }\n\n    profileToggle = () => {\n        this.setState({\n            profileToggle: !this.state.profileToggle\n        });\n    }\n\n    handleLogout = (e) => {\n        localStorage.clear();\n        this.props.history.push('/login');\n    }\n\n    //prop that checks role\n\n    render() {\n        return(\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <NavbarBrand href=\"/\">Welcome!</NavbarBrand>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <NavLink href=\"/\">Home</NavLink>\n                        </NavItem>\n                        {/* <NavItem>\n                            <NavLink href=\"/sensors\">Sensors</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/warehouse\">Warehouse(Test)</NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"/diagnostic\">Sensor Diagnostic(Test)</NavLink>\n                        </NavItem> */}\n                    </Nav>\n                    <Dropdown className=\"pr-2\" isOpen={this.state.profileToggle} toggle={this.profileToggle}>\n                        <DropdownToggle caret>\n                            Profile\n                            </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem header>Profile</DropdownItem>\n                            <Link className=\"dropdown-item\" to=\"/profile\">Settings</Link>\n                            <DropdownItem href=\"\">Support</DropdownItem>\n                            <DropdownItem divider />\n                            <DropdownItem onClick={this.handleLogout}>Logout</DropdownItem>\n                        </DropdownMenu>\n                        </Dropdown>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(NavBar);","import React from 'react';\nimport Navbar from './Navbar.jsx';\n\nclass Layout extends React.Component {\n    render() {\n        const container = {\n            \"paddingTop\": \"100px\",\n            \"display\": \"flex\",\n            \"flexDirection\": \"column\",\n            \"minHeight\": \"90vh\"\n        }\n        return(\n            <div>\n                <Navbar />\n                {/* <div className=\"container\"> */}\n                    {this.props.children}\n                {/* </div> */}\n            </div>\n        );\n    }\n}\n\nexport default Layout;","const customerJson = [\n    {\n        \"name\": \"Eric Food Supplier\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Alpha\",\n                \"state\": \"Texas\",\n                \"location\": {\n                    \"lat\": 40.854885,\n                    \"lng\": -88.081807},\n                \"status\" : \"operational\",\n                \"orders\": 20,\n                \"sensor\": [\n                        {\n                            \"sensorid\": 1,\n                            \"history\": []\n                        },\n                ]\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Bravo\",\n                \"state\": \"Nevada\",\n                \"location\": {\n                    \"lat\": 30.266666,\n                    \"lng\": -97.733330},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Charlie\",\n                \"state\": \"New York\",\n                \"location\": {\n                    \"lat\": 38.854885,\n                    \"lng\": -88.081807},\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Delta\",\n                \"state\": \"San Francisco\",\n                \"location\": {\n                    \"lat\": 37.773972,\n                    \"lng\": -122.431297},\n                \"status\" : \"Sensor Issue\",\n                \"orders\": 0\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Epsilon\",\n                \"state\": \"Kansas\",\n                \"location\": {\n                    \"lat\": 25.761681 ,\n                    \"lng\": -80.191788},\n                \"status\" : \"operational\",\n                \"orders\": 19\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Foxtrot\",\n                \"state\": \"Florida\",\n                \"location\": {\n                    \"lat\": 40.730610 ,\n                    \"lng\": -73.935242},\n                \"status\" : \"No Sensors Detected\",\n                \"orders\": 4\n            }\n        ]\n    },\n    {\n        \"name\": \"Bob the Farmer\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Fruit\",\n                \"state\": \"Michigan\",\n                \"location\": {\n                    \"lat\": 42.279594,\n                    \"lng\": -83.732124\n                },\n                \"status\" : \"operational\",\n                \"orders\": 20\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Dairy\",\n                \"state\": \"Ohio\",\n                \"location\": {\n                    \"lat\": 30.266666,\n                    \"lng\": -97.733330},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Vegtables\",\n                \"state\": \"Ohio\",\n                \"location\": {\n                    \"lat\": 39.983334,\n                    \"lng\": -82.983330\n                },\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Other\",\n                \"state\": \"Illinois\",\n                \"location\": {\n                    \"lat\": 41.881832,\n                    \"lng\": -87.623177},\n                \"status\" : \"error\",\n                \"orders\": 0\n            }\n        ]\n    },\n    {\n        \"name\": \"Mcdonald Food Supplier\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Cows\",\n                \"state\": \"California\",\n                \"location\": {\n                    \"lat\": 38.575764,\n                    \"lng\": -121.478851},\n                \"status\" : \"operational\",\n                \"orders\": 20\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Oranges\",\n                \"state\": \"California\",\n                \"location\": {\n                    \"lat\": 37.804363,\n                    \"lng\": -122.271111},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Lettice\",\n                \"state\": \"Oklahoma\",\n                \"location\": {\n                    \"lat\": 35.481918,\n                    \"lng\": -97.508469},\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Fish\",\n                \"state\": \"Oregon\",\n                \"location\": {\n                    \"lat\": 45.523064,\n                    \"lng\": -122.676483},\n                \"status\" : \"error\",\n                \"orders\": 0\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Bread\",\n                \"state\": \"Georgia\",\n                \"location\": {\n                    \"lat\": 33.753746 ,\n                    \"lng\": -84.386330},\n                \"status\" : \"operational\",\n                \"orders\": 19\n            }\n        ]\n    }\n]\n\nexport default customerJson;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, ButtonGroup, Row,\n    Card, CardText, CardBody, CardTitle, CardSubtitle,\n    Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer';\n\nclass InfraDashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            isOpen: false,\n            table_header: [],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: [],\n            customerTable: [],\n            customerHeader: [\"Name\", \"# of Warehouses\"],\n            isCustomerView: true,\n            selectedCustomer: \"\",\n            deleteModal: false,\n            searchBarValue: \"\",\n            zoom: 14,\n            centerLocation: {}\n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n\n        this.grabCustomer();\n        this.grabAllWarehouse();\n        this.setState({\n            table_header : [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data : [\n                [\"Alpha\", \"20\", \"Texas\", \"Operational\"],\n                [\"Bravo\", \"5\", \"Nevada\", \"Operational\"],\n                [\"Charlie\", \"100\", \"New York\", \"Sensor Issue\"],\n                [\"Delta\", \"0\", \"San Francisco\", \"Operational\"],\n                [\"Epsilon\", \"19\", \"Kansas\", \"Operational\"],\n                [\"Foxtrot\", \"4\", \"Kansas\", \"No Sensors Detected\"]\n            ]\n        });\n        // grab all warehouse in user's home region and load on map\n        // default detailed warehouse is first on the list \n        // run a condition check on role\n        // Manager and IOT Support will get table of customer\n    }\n\n    grabAllWarehouse = () => {\n\n        let warehouses = []\n        customerJson.forEach((customer) => {\n            let tmp = customer.warehouses.map((ware) => {\n                ware.customer = customer.name;\n                return ware;\n            });\n            console.log(tmp);\n            warehouses = warehouses.concat(tmp);\n        });\n        this.setState({\n            markerData: warehouses\n        });\n    }\n\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n        e.preventDefault();\n        let loc = {\n            lat: -1, \n            lng: -1\n        };\n        this.state.markerData.forEach((ware) => {\n            if (this.state.searchBarValue === ware.state ) {\n                // zoom in\n                loc = ware.location;\n            }\n        });\n        if (loc.lat < 0) {\n             console.log(\"NOt found\");\n        } else {\n            this.setState({\n                zoom: 14,\n                centerLocation: loc\n            });\n        }\n    }\n\n    grabCustomer = () =>  {\n        let cust = []\n        customerJson.forEach((customer) => {\n            let tmp = [customer.name, customer.warehouses.length];\n            cust.push(tmp);\n        });\n        this.setState({\n            customerTable: cust\n        });\n    }\n\n    modalToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    deleteToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            deleteModal: !this.state.deleteModal\n        });\n    }\n\n    handleCustomerRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n        this.setState({\n            isCustomerView: !this.state.isCustomerView,\n            selectedCustomer: r[0]\n        });\n    }\n\n    handleWarehouseRowClick = (e, r) =>{\n        // handle the warehouse row click\n        this.props.history.push({\n            pathname: '/manager_warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n    }\n\n    backToCustomer = () => {\n        this.setState({\n            isCustomerView: !this.state.isCustomerView\n        });\n    }\n\n    onMarkerClick = (props, marker) => {\n        console.log(props);\n        let h = props.name.split(\"-\");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1],\n                customer: h[2] ? h[2] : null\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        console.log(e);\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        console.log(e);\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n    handleSearchChange = (e) => {\n        e.preventDefault();\n        console.log(e.target.value);\n        this.setState({\n            searchBarValue: e.target.value\n        });\n    }\n\n    render () {\n        return(\n                <div className=\"pt-2 container-fluid\">\n                    <Form>\n                        <Row>\n                            <Col xs=\"9\" md=\"7\">\n                                <FormGroup>\n                                    <Input name=\"search\" \n                                    id=\"search\"\n                                    onChange={this.handleSearchChange}\n                                    value={this.state.searchBarValue}\n                                    placeholder=\"Enter a address, zip code or city....\" />\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"1\" md=\"1\">\n                                <Button onClick={this.searchWarehouse}>Submit</Button>\n                            </Col>\n                            { !this.state.isCustomerView ?\n                            <Col xs=\"12\" md=\"5\">\n                                <h2 >Currently Viewing: {this.state.selectedCustomer}</h2>\n                            </Col>\n                            : null}\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs=\"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                center={this.state.centerLocation}\n                                onClick={this.onMapClick}\n                                zoom={14}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.name}-${obj.status}-${obj.customer}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                { this.state.isCustomerView ? \n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Customers</h2>\n                                            </Col>\n                                            \n                                        </Row> \n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.customerHeader}\n                                            trows={this.state.customerTable}\n                                            handleRowClick={this.handleCustomerRowClick}\n                                            />\n                                    </> :\n                                    <>\n                                        <Row>\n                                            <Col md=\"7\">\n                                                <h2>List of Warehouses</h2>\n                                            </Col>\n                                            <Col md=\"5\">\n                                            \n                                            <ButtonGroup>\n                                                <Button onClick={this.modalToggle}>Add</Button>\n                                                <Button onClick={this.deleteToggle}>Delete</Button>\n                                                <Button onClick={this.backToCustomer}>Go Back</Button>\n                                            </ButtonGroup>\n                                        </Col>\n                                        </Row>\n                                        <Table xs=\"10\" hover={true}>\n                                        <thead>\n                                        <tr>\n                                            {\n                                                this.state.table_header.map((hr) => {\n                                                    return(\n                                                        <th>{hr}</th>\n                                                    );\n                                                })\n                                            }\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                this.state.table_data.map((r) => {\n                                                    return(\n                                                    <tr onClick={(e) => this.handleWarehouseRowClick(e, r)}>\n                                                        <td>{r[0]}</td>\n                                                        <td>{r[1]}</td>\n                                                        <td>{r[2]}</td>\n                                                        <td>{r[3]}</td>\n                                                        <td>{r[4]}</td>\n                                                    </tr>);\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                        </>\n                                }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Modal isOpen={this.state.deleteModal} toggle={this.deleteToggle}>\n                        <ModalHeader toggle={this.deleteToggle}>Delete Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.deleteWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"select\" name=\"warehouse_delete\">\n                                        <option value=\"alpha\">Alpha</option>\n                                        <option value=\"bravo\">Bravo</option>\n                                        <option value=\"charlie\">Charlie</option>\n                                        <option value=\"delta\">Delta</option>\n                                        <option value=\"epsilon\">Epsilon</option>\n                                        <option value=\"foxtrot\">Foxtrot</option>\n                                    </Input>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>{' '}\n                            <Button color=\"primary\" onClick={this.deleteToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n\n                    <Modal isOpen={this.state.modal} toggle={this.modalToggle}>\n                        <ModalHeader toggle={this.modalToggle}>Add Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.addWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Name here...\" />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label>Address</Label>\n                                    <Input name=\"address\"/>\n                                    <Row>\n                                        <Col>\n                                            <Label>City</Label>\n                                            <Input name=\"city\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>State</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>Zipcode</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                    </Row>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>{' '}\n                            <Button color=\"danger\" onClick={this.modalToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(InfraDashboard));","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader,\n    ModalBody, ModalFooter, Container,\n    Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"./common/CustomTable.jsx\";\n\nclass IndividualSensor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pages: 1,\n            selected_sensor: null\n        }\n    }\n    componentDidMount() {\n        // load sensor data\n        // calculate number of pages \n        // and separate out history based on pages\n    }\n\n    handleRowClick = () => {\n        // handle row click\n    }\n\n    render() {\n        const test = [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"]\n        ];\n        const temperature_header = [\"Time\", \"Temperature\"];\n        return(\n            <>\n                <h5>Sensor {this.state.selected_sensor}</h5>\n                <Table>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">Type:</th>\n                            <td scope=\"row\">Temperature</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Status:</th>\n                            <td scope=\"row\">Operational</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <h5>History</h5>\n                <CustomTable \n                    title=\"History\" \n                    header={temperature_header} \n                    trows={test} \n                    handleRowClick={this.handleRowClick}/>\n                <Pagination aria-label=\"Page navigation example\">\n                <PaginationItem>\n                    <PaginationLink first onClick={()=> {console.log(\"load first\")}}/>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink previous />\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    1\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    2\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    3\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink next />\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink last />\n                </PaginationItem>\n                </Pagination>\n            </>\n        );\n    }\n}\n\nexport default IndividualSensor;","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport IndividualSensors from '../IndividualSensor.jsx';\nimport { Link } from \"react-router-dom\";\n\n\nclass SupportWarehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : null,\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n        this.setState({\n            chart_data : [\n            {name: '15:05', temperature: 68, threshold: 80},\n            {name: '15:10', temperature: 69, threshold: 80}, \n            {name: '15:15', temperature: 66, threshold: 80}, \n            {name: '15:20', temperature: 66, threshold: 80},\n            {name: '15:25', temperature: 68, threshold: 80},\n            {name: '15:30', temperature: 70, threshold: 80},\n            {name: '15:35', temperature: 71, threshold: 80},\n            {name: '15:40', temperature: 71, threshold: 80},\n            {name: '15:45', temperature: 71, threshold: 80},\n            {name: '15:50', temperature: 75, threshold: 80},\n            {name: '15:55', temperature: 75, threshold: 80},\n            {name: '16:00', temperature: 76, threshold: 80}\n        ]\n        });\n\n        let chartdata = [\n            {sensorId: \"1\",\n            sensorName: \"Sensor #1\",\n            data: [\n                    {name: '15:05', temperature: 68, threshold: 80},\n                    {name: '15:10', temperature: 69, threshold: 80}, \n                    {name: '15:15', temperature: 66, threshold: 80}, \n                    {name: '15:20', temperature: 66, threshold: 80},\n                    {name: '15:25', temperature: 68, threshold: 80},\n                    {name: '15:30', temperature: 70, threshold: 80},\n                    {name: '15:35', temperature: 71, threshold: 80},\n                    {name: '15:40', temperature: 71, threshold: 80},\n                    {name: '15:45', temperature: 71, threshold: 80},\n                    {name: '15:50', temperature: 75, threshold: 80},\n                    {name: '15:55', temperature: 75, threshold: 80},\n                    {name: '16:00', temperature: 76, threshold: 80}\n                ]\n            },\n            {sensorId: \"2\"}\n        ];\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    addSensorToggle = () => {\n        this.setState({\n            addSensorModal: !this.state.addSensorModal\n        });\n    }\n\n    addSensorSubmit = (e) => {\n        // add sensor\n        e.preventDefault();\n        console.log(\"Adding sensors..\");\n    }\n\n    manageSensorToggle = () => {\n        this.setState({\n            manageSensorModal: !this.state.manageSensorModal\n        });\n    }\n    manageOrderToggle = () => {\n        this.setState({\n            manageOrderModal: !this.state.manageOrderModal\n        });\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    handleAddSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            addSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    renderCustomizedLabel = ({\n        cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n      }) => {\n        const RADIAN = Math.PI / 180;\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      \n        return (\n          <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n            {`${(percent * 100).toFixed(0)}%`}\n          </text>\n        );\n    }\n\n    render() {\n        const test = [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"]\n        ];\n        const ware_header = [\"Warehouse#\", \"First Name\", \"Last Name\", \"Username\"];\n        const temperature_header = [\"Time\", \"Temperature\"];\n        const pieData = [\n            { name: 'Group A', value: 400 },\n            { name: 'Group B', value: 300 },\n            { name: 'Group C', value: 300 },\n            { name: 'Group D', value: 200 },\n          ];\n        const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        return(\n            <Container className=\"pb-5\" fluid=\"xl\">\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"6\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"4\">\n                        <Button color=\"primary\" onClick={this.addSensorToggle}>Add Sensor</Button>{' '}\n                        <Link className=\"btn btn-primary\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody>\n                                <CardTitle tag=\"h5\">Sensor #1</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <Line type=\"monotone\" dataKey=\"threshold\" stroke=\"#DC143C\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <Line type=\"monotone\" dataKey=\"threshold\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                        \n                    </Col>\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Orders Summary</CardTitle>\n                                <ResponsiveContainer width={400} height={300}>\n                                <PieChart width={400} height={400}>\n                                    <Pie\n                                    data={pieData}\n                                    cx={200}\n                                    cy={150}\n                                    labelLine={false}\n                                    label={this.renderCustomizedLabel}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    >\n                                    {\n                                        pieData.map((entry, index) => \n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} \n                                        />)\n                                    }\n                                    </Pie>\n                                </PieChart>\n                                </ResponsiveContainer>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <td>Order#</td>\n                                            <td>Type</td>\n                                            <td>Origin</td>\n                                            <td>Destination</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>1</td>\n                                            <td>Corn</td>\n                                            <td>San Francsico</td>\n                                            <td>Las Vegas</td>\n                                        </tr>\n                                        <tr>\n                                            <td>2</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>New York</td>\n                                        </tr>\n                                        <tr>\n                                            <td>3</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>Seattle</td>\n                                        </tr>\n                                        <tr>\n                                            <td>4</td>\n                                            <td>Food</td>\n                                            <td>San Francsico</td>\n                                            <td>Miami</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button color=\"primary\" onClick={this.manageOrderToggle}>Manage Orders</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                    <option value=\"wind\">Wind</option>\n                                </Input>\n                            </FormGroup>\n                            { this.state.addSensor.sensorType === \"temperature\" ? \n                            <FormGroup>\n                                <Label for=\"exampleSelectMulti\">Unit Type</Label>\n                                <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\">\n                                <option>Fahrenheit</option>\n                                <option>Celsius</option>\n                                </Input>\n                            </FormGroup> : null}\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Threshold</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"\" />\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"secondary\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n\n                <Modal isOpen={this.state.manageOrderModal} toggle={this.manageOrderToggle}>\n                    <ModalHeader toggle={this.manageOrderToggle}>Manage Order</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageOrderToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n            </Container>\n        );\n    }\n}\n\nexport default SupportWarehouse;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer';\n\nclass SupportDashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            table_header: [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: [],\n            customerTable: [],\n            customerHeader: [\"Name\", \"# of Warehouses\"],\n            isCustomerView: true,\n            selectedCustomer: \"\",\n            searchBarValue: \"\",\n            zoom: 14,\n            centerLocation: {}\n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n\n        this.grabCustomer();\n        this.grabAllWarehouse();\n        // grab all warehouse in user's home region and load on map\n        // default detailed warehouse is first on the list \n        // run a condition check on role\n        // Manager and IOT Support will get table of customer\n    }\n\n    grabAllWarehouse = () => {\n\n        let warehouses = []\n        customerJson.forEach((customer) => {\n            let tmp = customer.warehouses.map((ware) => {\n                ware.customer = customer.name;\n                return ware;\n            });\n            console.log(tmp);\n            warehouses = warehouses.concat(tmp);\n        });\n        this.setState({\n            markerData: warehouses\n        });\n    }\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n        e.preventDefault();\n        let loc = {\n            lat: -1, \n            lng: -1\n        };\n        this.state.markerData.forEach((ware) => {\n            if (this.state.searchBarValue === ware.state ) {\n                // zoom in\n                loc = ware.location;\n            }\n        });\n        if (loc.lat < 0) {\n             console.log(\"NOt found\");\n        } else {\n            this.setState({\n                zoom: 14,\n                centerLocation: loc\n            });\n        }\n    }\n\n    grabCustomer = () =>  {\n        let cust = []\n        customerJson.forEach((customer) => {\n            let tmp = [customer.name, customer.warehouses.length];\n            cust.push(tmp);\n        });\n        this.setState({\n            customerTable: cust\n        });\n    }\n\n    handleCustomerRowClick = (e, r) => {\n        // handle clicking a row\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n\n        // setup table\n        let customer_data = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_data = customer.warehouses.map((ware) => {\n                    return [ware.name, ware.orders, ware.state, ware.status];\n                });\n            }\n        });\n\n        //setup customer markers\n        let customer_marker = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_marker = customer.warehouses.map((ware) => {\n                    return ware;\n                });\n            }\n        });\n        // marker\n\n        this.setState({\n            isCustomerView: !this.state.isCustomerView,\n            selectedCustomer: r[0],\n            table_data: customer_data,\n            markerData: customer_marker\n        });\n    }\n\n    handleWarehouseRowClick = (e, r) =>{\n        // handle the warehouse row click\n        this.props.history.push({\n            pathname: '/support_warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n    }\n\n    backToCustomer = () => {\n        this.grabAllWarehouse();\n        this.setState({\n            isCustomerView: !this.state.isCustomerView\n        });\n    }\n\n    onMarkerClick = (props, marker) => {\n        let h = props.name.split(\"-\");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1],\n                customer: h[2] ? h[2] : null\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n    handleSearchChange = (e) => {\n        e.preventDefault();\n        console.log(e.target.value);\n        this.setState({\n            searchBarValue: e.target.value\n        });\n    }\n\n    render () {\n        return(\n                <div className=\"pt-2 container-fluid\">\n                    <Form onSubmit={this.searchWarehouse}>\n                        <Row>\n                            <Col xs=\"9\" md=\"7\">\n                                <FormGroup>\n                                    <Input name=\"search\"\n                                    id=\"search\"\n                                    onChange={this.handleSearchChange}\n                                    value={this.state.searchBarValue}\n                                    placeholder=\"Enter a address, zip code or city....\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"1\" xs=\"1\">\n                                <Button color=\"primary\" type=\"submit\">Submit</Button>\n                            </Col>\n                            { !this.state.isCustomerView ?\n                            <Col md=\"5\">\n                                <h2 >Currently Viewing: {this.state.selectedCustomer}</h2>\n                            </Col>\n                            : null}\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs=\"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                center={this.state.centerLocation}\n                                onClick={this.onMapClick}\n                                zoom={this.state.zoom}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.name}-${obj.status}-${obj.customer}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            {\n                                                                this.state.selectedMarkerInfo.customer ?\n                                                                <Col>\n                                                                    <p>{this.state.selectedMarkerInfo.customer}</p>\n                                                                </Col> : null\n                                                            }\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                { this.state.isCustomerView ? \n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Customers</h2>\n                                            </Col>\n                                            \n                                        </Row> \n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.customerHeader}\n                                            trows={this.state.customerTable}\n                                            handleRowClick={this.handleCustomerRowClick}\n                                            />\n                                    </> :\n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Warehouses</h2>\n                                            </Col>\n                                            <Col md=\"4\">\n                                            <Button color=\"primary\" onClick={this.backToCustomer}>Go Back</Button>\n                                        </Col>\n                                        </Row>\n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.table_header}\n                                            trows={this.state.table_data}\n                                            handleRowClick={this.handleWarehouseRowClick}\n                                            />\n                                        </>\n                                }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(SupportDashboard));","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport { Link } from \"react-router-dom\";\n\nclass SupportWarehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : null,\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n        this.setState({\n            chart_data : [\n            {name: '15:05', temperature: 68, threshold: 80},\n            {name: '15:10', temperature: 69, threshold: 80}, \n            {name: '15:15', temperature: 66, threshold: 80}, \n            {name: '15:20', temperature: 66, threshold: 80},\n            {name: '15:25', temperature: 68, threshold: 80},\n            {name: '15:30', temperature: 70, threshold: 80},\n            {name: '15:35', temperature: 71, threshold: 80},\n            {name: '15:40', temperature: 71, threshold: 80},\n            {name: '15:45', temperature: 71, threshold: 80},\n            {name: '15:50', temperature: 75, threshold: 80},\n            {name: '15:55', temperature: 75, threshold: 80},\n            {name: '16:00', temperature: 76, threshold: 80}\n        ]\n        });\n\n        let chartdata = [\n            {sensorId: \"1\",\n            sensorName: \"Sensor #1\",\n            data: [\n                    {name: '15:05', temperature: 68, threshold: 80},\n                    {name: '15:10', temperature: 69, threshold: 80}, \n                    {name: '15:15', temperature: 66, threshold: 80}, \n                    {name: '15:20', temperature: 66, threshold: 80},\n                    {name: '15:25', temperature: 68, threshold: 80},\n                    {name: '15:30', temperature: 70, threshold: 80},\n                    {name: '15:35', temperature: 71, threshold: 80},\n                    {name: '15:40', temperature: 71, threshold: 80},\n                    {name: '15:45', temperature: 71, threshold: 80},\n                    {name: '15:50', temperature: 75, threshold: 80},\n                    {name: '15:55', temperature: 75, threshold: 80},\n                    {name: '16:00', temperature: 76, threshold: 80}\n                ]\n            },\n            {sensorId: \"2\"}\n        ];\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    addSensorToggle = () => {\n        this.setState({\n            addSensorModal: !this.state.addSensorModal\n        });\n    }\n\n    addSensorSubmit = (e) => {\n        // add sensor\n        e.preventDefault();\n        console.log(\"Adding sensors..\");\n    }\n\n    manageSensorToggle = () => {\n        this.setState({\n            manageSensorModal: !this.state.manageSensorModal\n        });\n    }\n    manageOrderToggle = () => {\n        this.setState({\n            manageOrderModal: !this.state.manageOrderModal\n        });\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    handleAddSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            addSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    renderCustomizedLabel = ({\n        cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n      }) => {\n        const RADIAN = Math.PI / 180;\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      \n        return (\n          <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n            {`${(percent * 100).toFixed(0)}%`}\n          </text>\n        );\n    }\n\n    render() {\n        const test = [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"]\n        ];\n        const ware_header = [\"Warehouse#\", \"First Name\", \"Last Name\", \"Username\"];\n        const temperature_header = [\"Time\", \"Temperature\"];\n        const pieData = [\n            { name: 'Group A', value: 400 },\n            { name: 'Group B', value: 300 },\n            { name: 'Group C', value: 300 },\n            { name: 'Group D', value: 200 },\n          ];\n        const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        return(\n            <Container className=\"pb-5\" fluid=\"xl\">\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"4\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"4\">\n                        <Link className=\"btn btn-primary\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody>\n                                <CardTitle tag=\"h5\">Sensor #1</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <Line type=\"monotone\" dataKey=\"threshold\" stroke=\"#DC143C\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <Line type=\"monotone\" dataKey=\"threshold\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                        \n                    </Col>\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Orders Summary</CardTitle>\n                                <ResponsiveContainer width={400} height={300}>\n                                <PieChart width={400} height={400}>\n                                    <Pie\n                                    data={pieData}\n                                    cx={200}\n                                    cy={150}\n                                    labelLine={false}\n                                    label={this.renderCustomizedLabel}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    >\n                                    {\n                                        pieData.map((entry, index) => \n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} \n                                        />)\n                                    }\n                                    </Pie>\n                                </PieChart>\n                                </ResponsiveContainer>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <td>Order#</td>\n                                            <td>Type</td>\n                                            <td>Origin</td>\n                                            <td>Destination</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>1</td>\n                                            <td>Corn</td>\n                                            <td>San Francsico</td>\n                                            <td>Las Vegas</td>\n                                        </tr>\n                                        <tr>\n                                            <td>2</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>New York</td>\n                                        </tr>\n                                        <tr>\n                                            <td>3</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>Seattle</td>\n                                        </tr>\n                                        <tr>\n                                            <td>4</td>\n                                            <td>Food</td>\n                                            <td>San Francsico</td>\n                                            <td>Miami</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button onClick={this.manageOrderToggle}>Manage Orders</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                    <option value=\"wind\">Wind</option>\n                                </Input>\n                            </FormGroup>\n                            { this.state.addSensor.sensorType === \"temperature\" ? \n                            <FormGroup>\n                                <Label for=\"exampleSelectMulti\">Unit Type</Label>\n                                <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\">\n                                <option>Fahrenheit</option>\n                                <option>Celsius</option>\n                                </Input>\n                            </FormGroup> : null}\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Threshold</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"\" />\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"secondary\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        {/* <IndividualSensors/> */}\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n\n                <Modal isOpen={this.state.manageOrderModal} toggle={this.manageOrderToggle}>\n                    <ModalHeader toggle={this.manageOrderToggle}>Manage Order</ModalHeader>\n                    <ModalBody>\n                        {/* <IndividualSensors/> */}\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageOrderToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n            </Container>\n        );\n    }\n}\n\nexport default SupportWarehouse;","import React from 'react';\nimport {\n    Col, Form,\n    FormGroup, Input,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle\n  } from 'reactstrap';\n  import CustomTable from \"./common/CustomTable.jsx\";\n  import { LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\n  import {withRouter, Link} from 'react-router-dom'; \n\n  class Sensors extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            chart_data: []\n        }\n    }\n    componentDidMount() {\n        this.setState({\n            chart_data : [{name: 'Page A', uv: 400, pv: 2400, amt: 2400}, \n            {name: 'Page B', uv: 300, pv: 2400, amt: 2400}, \n            {name: 'Page C', uv: 350, pv: 2400, amt: 2400}]\n        });\n        // grab all warehouse in user's home region and load on map\n        // default detailed warehouse is first on the list \n    }\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n      render() {\n            const sensor_header = [\"Sensor#\", \"First Name\", \"Last Name\", \"Username\"];\n            const test = [\n                [1, \"eric\", \"eric\", \"eruc\"],\n                [2, \"elliot\", \"elliot\", \"elliot\"],\n                [3, \"hi\", \"there\", \"world\"],\n                [4, \"nice\", \"to\", \"meet you\"],\n                [5, \"data\", \"data\", \"data\"]\n            ];\n          return(\n            <div>\n                <h2>Sensors list</h2>\n                <Form>\n                        <Row>\n                            <Col>\n                            <FormGroup>\n                                <Input name=\"search\" id=\"search\" placeholder=\"Enter a address, zip code or city....\" />\n                            </FormGroup>\n                            </Col>\n                            <Col>\n                            <Button>Submit</Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs=\"7\">\n                            <CustomTable \n                                title=\"List of Warehouses\"\n                                header={sensor_header}\n                                trows={test}\n                                handleRowClick={this.handleRowClick}\n                                />\n                        </Col>\n                        <Col xs=\"5\">\n                        <Card>\n                            <LineChart width={600} height={300} data={this.state.chart_data}>\n                                <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                                <CartesianGrid stroke=\"#ccc\" />\n                                <XAxis dataKey=\"name\" />\n                                <YAxis />\n                            </LineChart>\n                            <CardBody>\n                                <CardTitle tag=\"h5\">Card title</CardTitle>\n                                <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">Card subtitle</CardSubtitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <CustomTable title=\"List of Orders\" header={sensor_header} trows={test} handleRowClick={this.handleRowClick}/>\n                                <Button>Add Sensor</Button>\n                            </CardBody>\n                        </Card>\n                        </Col>\n                    </Row>\n            </div>\n          );\n      }\n  }\n\n  export default withRouter(Sensors);","import React from 'react';\nimport {\n    Col, Form, Table,\n    FormGroup, Input,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle, Container\n  } from 'reactstrap';\n  import CustomTable from \"./common/CustomTable.jsx\";\n  import { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\n  import {withRouter, Link} from 'react-router-dom';\n/*\nTODO: Work on modal forms for edit profile, edit billing and view charts\n*/\n  class Profile extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n            chart_data: [],\n            role: localStorage.getItem(\"user\") ? \n            localStorage.getItem(\"user\") : \"\"\n          }\n      }\n\n      componentDidMount() {\n\n        // test data\n        this.setState({\n            chart_data : [\n            {name: '15:05', temperature: 68},\n            {name: '15:10', temperature: 69}, \n            {name: '15:15', temperature: 66}, \n            {name: '15:20', temperature: 66},\n            {name: '15:25', temperature: 68},\n            {name: '15:30', temperature: 70},\n            {name: '15:35', temperature: 71},\n            {name: '15:40', temperature: 71},\n            {name: '15:45', temperature: 71},\n            {name: '15:50', temperature: 75},\n            {name: '15:55', temperature: 75},\n            {name: '16:00', temperature: 76}\n        ]\n        });\n    }\n      render() {\n          return(\n                <Container className=\"pt-4\">\n                    \n                    <Row className=\"justify-content-md-center\">\n                        \n                        <Col xs={12} md={5}>\n                            <h2>Profile</h2>\n                            <Row>\n                                <img src=\"./logo512.png\" style={{height: '200px', width:'200px'}} class=\"rounded float-left\" />\n                            </Row>\n                            <Row>\n                                <Table borderless={true}>\n                                    <thead>\n                                        <tr>\n                                            <th>Name of the User</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <th scope=\"row\">Role:</th>\n                                            <th scope=\"row\">{this.state.role}</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Address</th>\n                                            <th scope=\"row\">1234 Rainbow Rd</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\"></th>\n                                            <th scope=\"row\">City, State Zipcode</th>\n                                        </tr>\n                                        <tr>\n                                        <th scope=\"row\">Email:</th>\n                                            <th scope=\"row\">test@test.com</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Phone Number:</th>\n                                            <th scope=\"row\">+1(888)-009-1234</th>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button>Edit Profile</Button>\n                            </Row>\n                            \n                        </Col>\n                        <Col className=\"pt-2\" md={7}>\n                                <h2>Billing Information</h2>\n                            <Row>\n                                <Table borderless={true}>\n                                    <tbody>\n                                        <tr>\n                                            <th scope=\"row\">Credit Card Number:</th>\n                                            <th scope=\"row\">*******1889</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Billing Address:</th>\n                                            <th scope=\"row\">1234 Rainbow Rd</th>\n                                        </tr>\n                                        <tr>\n                                        <th scope=\"row\"></th>\n                                            <th scope=\"row\">City, State Zipcode</th>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button>Edit Billing</Button>\n                            </Row>\n                            <Row className=\"pl-2 pt-4\">\n                                <h2>Track Expenses</h2>\n                            </Row>\n                            <Row>\n                                <ResponsiveContainer className=\"pt-2\" width=\"100%\" height={500}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Row>\n                            <Button>See Details</Button>\n                        </Col>\n                    </Row>\n                </Container>\n          );\n      }\n  }\n\n  export default Profile;","const warehouseJSON = [\n    {\n        history: [\n            [1, \"Corn\", \"San Francisco\", \"Las Vegas\"],\n            [2, \"Fruit\", \"San Francisco\", \"New York\"], \n            [3, \"Fruit\", \"San Francisco\", \"Seattle\"],\n            [4, \"Food\", \"San Francisco\", \"Miami\"],\n            [5, \"Milk\", \"Kansas\", \"San Francisco\"],\n            [6, \"Avacado\", \"Los Angeles\", \"Boston\"],\n            [7, \"Melon\", \"Los Angeles\", \"Boston\"],\n            [8, \"Cherries\", \"Sacramento\", \"Florida\"],\n            [9, \"Oranges\", \"Oakland\", \"Michigan\"],\n            [10, \"Beef\", \"Wisconsin\", \"San Francsico\"]\n        ]\n    },\n    {\n        sensorId: 1,\n        type: \"temperature\",\n        status: \"operational\",\n        history: [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"],\n            [\"11/12/2020-15:55\", \"69\"],\n            [\"11/12/2020-15:50\", \"69\"],\n            [\"11/12/2020-15:45\", \"69\"],\n            [\"11/12/2020-15:40\", \"67\"],\n            [\"11/12/2020-15:35\", \"67\"],\n            [\"11/12/2020-15:30\", \"67\"]\n        ]\n    }\n]\n\nexport default warehouseJSON;","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container, Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"./common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport IndividualSensors from './IndividualSensor.jsx';\nimport { Link } from \"react-router-dom\";\nimport warehouseJSON from './mock_data/warehouse';\n\nclass Warehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : \"\",\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null,\n            selectedSensor: false,\n            orderPages: 1,\n            orderHistory: warehouseJSON[0].history        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n\n        this.setState({\n            chart_data : [\n            {name: '15:05', temperature: 68},\n            {name: '15:10', temperature: 69}, \n            {name: '15:15', temperature: 66}, \n            {name: '15:20', temperature: 66},\n            {name: '15:25', temperature: 68},\n            {name: '15:30', temperature: 70},\n            {name: '15:35', temperature: 71},\n            {name: '15:40', temperature: 71},\n            {name: '15:45', temperature: 71},\n            {name: '15:50', temperature: 75},\n            {name: '15:55', temperature: 75},\n            {name: '16:00', temperature: 76}\n        ]\n        });\n\n        let chartdata = [\n            {sensorId: \"1\",\n            sensorName: \"Sensor #1\",\n            data: [\n                    {name: '15:05', temperature: 68},\n                    {name: '15:10', temperature: 69}, \n                    {name: '15:15', temperature: 66}, \n                    {name: '15:20', temperature: 66},\n                    {name: '15:25', temperature: 68},\n                    {name: '15:30', temperature: 70},\n                    {name: '15:35', temperature: 71},\n                    {name: '15:40', temperature: 71},\n                    {name: '15:45', temperature: 71},\n                    {name: '15:50', temperature: 75},\n                    {name: '15:55', temperature: 75},\n                    {name: '16:00', temperature: 76}\n                ]\n            },\n            {sensorId: \"2\"}\n        ];\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    orderTablePagination() {\n        // organize order table pagination\n        const table_size = 5;\n    }\n\n    addSensorToggle = () => {\n        this.setState({\n            addSensorModal: !this.state.addSensorModal\n        });\n    }\n\n    addSensorSubmit = (e) => {\n        // add sensor\n        e.preventDefault();\n        console.log(\"Adding sensors..\");\n    }\n\n    manageSensorToggle = () => {\n        this.setState({\n            manageSensorModal: !this.state.manageSensorModal\n        });\n    }\n    manageOrderToggle = () => {\n        this.setState({\n            manageOrderModal: !this.state.manageOrderModal\n        });\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    handleAddSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            addSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    manageIndividualSensor = () => {\n        this.setState({\n            selectedSensor: !this.state.selectedSensor\n        });\n    }\n\n    renderCustomizedLabel = ({\n        cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n      }) => {\n        const RADIAN = Math.PI / 180;\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      \n        return (\n          <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n            {`${(percent * 100).toFixed(0)}%`}\n          </text>\n        );\n    }\n\n    render() {\n        const test = [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"]\n        ];\n        const ware_header = [\"Warehouse#\", \"First Name\", \"Last Name\", \"Username\"];\n        const temperature_header = [\"Time\", \"Temperature\"];\n        const pieData = [\n            { name: 'Group A', value: 400 },\n            { name: 'Group B', value: 300 },\n            { name: 'Group C', value: 300 },\n            { name: 'Group D', value: 200 },\n          ];\n        const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        const isMobile = this.state.width <= 600;\n        return(<>\n            { isMobile ? \n                <Container className=\"pb-5\" fluid=\"xs\">\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"6\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"4\">\n                        <Button color=\"primary\" onClick={this.addSensorToggle}>Add Sensor</Button>{' '}\n                        <Link className=\"btn btn-primary\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card width=\"100%\">\n                            <CardBody>\n                                <CardTitle tag=\"h5\">Sensor #1</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                    <Col className=\"pb-4\" xs=\"auto\" md=\"auto\">\n                        <Card width=\"100%\">\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                        \n                    </Col>\n                    <Col className=\"pb-4\" xs=\"auto\" md=\"auto\">\n                        <Card width=\"100%\">\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Orders Summary</CardTitle>\n                                <ResponsiveContainer width={400} height={300}>\n                                <PieChart width={400} height={400}>\n                                    <Pie\n                                    data={pieData}\n                                    cx={200}\n                                    cy={150}\n                                    labelLine={false}\n                                    label={this.renderCustomizedLabel}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    >\n                                    {\n                                        pieData.map((entry, index) => \n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} \n                                        />)\n                                    }\n                                    </Pie>\n                                </PieChart>\n                                </ResponsiveContainer>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <td>Order#</td>\n                                            <td>Type</td>\n                                            <td>Origin</td>\n                                            <td>Destination</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>1</td>\n                                            <td>Corn</td>\n                                            <td>San Francsico</td>\n                                            <td>Las Vegas</td>\n                                        </tr>\n                                        <tr>\n                                            <td>2</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>New York</td>\n                                        </tr>\n                                        <tr>\n                                            <td>3</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>Seattle</td>\n                                        </tr>\n                                        <tr>\n                                            <td>4</td>\n                                            <td>Food</td>\n                                            <td>San Francsico</td>\n                                            <td>Miami</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Pagination aria-label=\"Page navigation example\">\n                                    <PaginationItem>\n                                        <PaginationLink first onClick={()=> {console.log(\"load first\")}}/>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink previous />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        1\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        2\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        3\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink next />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink last />\n                                    </PaginationItem>\n                                </Pagination>\n                                {/* <Button onClick={this.manageOrderToggle}>Manage Orders</Button> */}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                </Input>\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"secondary\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" onClick={this.manageIndividualSensor} >Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n\n                <Modal isOpen={this.state.manageOrderModal} toggle={this.manageOrderToggle}>\n                    <ModalHeader toggle={this.manageOrderToggle}>Manage Order</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageOrderToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n            </Container>\n            :\n            <Container className=\"pb-5\" fluid=\"xl\">\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"6\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"4\">\n                        <Button color=\"primary\" onClick={this.addSensorToggle}>Add Sensor</Button>{' '}\n                        <Link className=\"btn btn-primary\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody>\n                                <CardTitle tag=\"h5\">Sensor #1</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                        \n                    </Col>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Card2 title</CardTitle>\n                                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\n                                <ResponsiveContainer width={400} height={300}>\n                                    <LineChart width={400} height={300} data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={temperature_header} \n                                    trows={test} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Button onClick={this.manageSensorToggle}>Manage Sensor</Button>\n                            </CardBody>\n                        </Card>\n                    </Col>\n                    <Col className=\"pb-4\" md=\"auto\">\n                        <Card style={{width:\"500px\"}}>\n                            <CardBody >\n                                <CardTitle tag=\"h5\">Orders Summary</CardTitle>\n                                <ResponsiveContainer width={400} height={300}>\n                                <PieChart width={400} height={400}>\n                                    <Pie\n                                    data={pieData}\n                                    cx={200}\n                                    cy={150}\n                                    labelLine={false}\n                                    label={this.renderCustomizedLabel}\n                                    outerRadius={80}\n                                    fill=\"#8884d8\"\n                                    dataKey=\"value\"\n                                    >\n                                    {\n                                        pieData.map((entry, index) => \n                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} \n                                        />)\n                                    }\n                                    </Pie>\n                                </PieChart>\n                                </ResponsiveContainer>\n                                <Table>\n                                    <thead>\n                                        <tr>\n                                            <td>Order#</td>\n                                            <td>Type</td>\n                                            <td>Origin</td>\n                                            <td>Destination</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>1</td>\n                                            <td>Corn</td>\n                                            <td>San Francsico</td>\n                                            <td>Las Vegas</td>\n                                        </tr>\n                                        <tr>\n                                            <td>2</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>New York</td>\n                                        </tr>\n                                        <tr>\n                                            <td>3</td>\n                                            <td>Fruit</td>\n                                            <td>San Francsico</td>\n                                            <td>Seattle</td>\n                                        </tr>\n                                        <tr>\n                                            <td>4</td>\n                                            <td>Food</td>\n                                            <td>San Francsico</td>\n                                            <td>Miami</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Pagination aria-label=\"Page navigation example\">\n                                    <PaginationItem>\n                                        <PaginationLink first onClick={()=> {console.log(\"load first\")}}/>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink previous />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        1\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        2\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink >\n                                        3\n                                        </PaginationLink>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink next />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink last />\n                                    </PaginationItem>\n                                </Pagination>\n                                {/* <Button onClick={this.manageOrderToggle}>Manage Orders</Button> */}\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                </Input>\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"secondary\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" onClick={this.manageIndividualSensor} >Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n\n                <Modal isOpen={this.state.manageOrderModal} toggle={this.manageOrderToggle}>\n                    <ModalHeader toggle={this.manageOrderToggle}>Manage Order</ModalHeader>\n                    <ModalBody>\n                        <IndividualSensors/>\n                    </ModalBody> \n                    <ModalFooter>\n                    <Button color=\"primary\" type=\"submit\">Update</Button>{' '}\n                        <Button color=\"secondary\" onClick={this.manageOrderToggle}>Cancel</Button>\n                    </ModalFooter>       \n                </Modal>\n            </Container>}</>\n        );\n    }\n}\n\nexport default Warehouse;","import React from 'react';\nimport Dashboard from './Dashboard.jsx';\nimport Layout from './common/Layout.jsx';\nimport InfraDashboard from './InfraManager/InfraDashboard.jsx';\nimport InfraWarehouse from './InfraManager/InfraWarehouse.jsx';\nimport SupportDashboard from './IOTSupport/SupportDashboard.jsx';\nimport SupportWarehouse from './IOTSupport/SupportWarehouse.jsx';\nimport Sensors from './Sensors.jsx';\nimport Profile from './Profile.jsx';\nimport Warehouse from './Warehouse.jsx';\n\nimport {\n    BrowserRouter as Router,\n    HashRouter,\n    Route,\n    Switch\n  } from \"react-router-dom\";\n\nexport default class LoggedInRoutes extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props);\n    }\n\n    checkRoles() {\n        if (localStorage.getItem(\"user\") == \"support\") {\n            return \"support\";\n        } else if (localStorage.getItem(\"user\") == \"manager\") {\n            return \"manager\";\n        } else {\n            return \"supplier\";\n        }\n    }\n\n    render() {\n        // conditional check to direct to correct dashboard\n        return (\n            <Layout>\n                <Switch>\n                    {/* <Route path=\"/manager\" component={InfraDashboard} />\n                    <Route path=\"/support\" component={SupportDashboard} /> */}\n                    <Route path=\"/profile\" component={Profile} />\n                    <Route path=\"/sensors\" component={Sensors} />\n                    <Route path=\"/warehouse\" component={Warehouse} />\n                    <Route path=\"/support_warehouse\" component={SupportWarehouse} />\n                    <Route path=\"/manager_warehouse\" component={InfraWarehouse} />\n                   \n                    <Route path=\"/\"\n                        render={props => {\n                            if (this.checkRoles() === \"support\") {\n                                return <SupportDashboard />;\n                            } else if (this.checkRoles() === \"manager\") {\n                                return <InfraDashboard />;\n                            } else {\n                                return <Dashboard />;\n                            }\n                        }} />\n                </Switch>\n            </Layout>\n        );\n    }\n}","import React from 'react';\nimport {withRouter, Link} from 'react-router-dom'; \nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button, Row\n  } from 'reactstrap';\n  \n\n\nclass Login extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            pass: ''\n        }\n    }\n\n    handleChange = (e) => {\n        console.log(\"handle change\", e);\n        if (e.target.name === 'username') {\n            this.setState({\n                'username': e.target.value\n            });\n        } else {\n            this.setState({\n                'pass': e.target.value\n            });\n        }\n\n    }\n    submitLogin = (e) => {\n        const json = {\n            'support': '1234',\n            'manager': '1234',\n            'supplier': '1234'\n        }\n        // run authentication\n        e.preventDefault();\n        if (json[this.state.username] === this.state.pass) {\n            if (this.state.username === 'support') {\n                localStorage.setItem('user', 'support');\n            } else if (this.state.username === 'manager') {\n                localStorage.setItem('user', 'manager');\n            } else {\n                localStorage.setItem('user', 'supplier');\n            }\n            console.log(\"redirect...\");\n            this.props.history.push(\"/\");\n        }\n    }\n\n    render () {\n        return(\n            <div className=\"App\">\n                <Container>\n                    <Row className=\"pt-5 justify-content-center\">\n                    <h2>SupplyChain Login</h2>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                    <Form className=\"pt-4 pb-4 pr-5 pl-5 border\" onSubmit={this.submitLogin}>\n                        <Col>\n                            <FormGroup>\n                                <Label>Username/Email</Label>\n                                <Input \n                                    type=\"username\"\n                                    name=\"username\"\n                                    placeholder=\"email@email.com\"\n                                    value={this.state.username || ''}\n                                    onChange={this.handleChange}\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col>\n                            <FormGroup>\n                            <Label for=\"exPassword\">Password</Label>\n                            <Input\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"exPassword\"\n                                placeholder=\"*******\"\n                                value={this.state.pass || ''}\n                                onChange={this.handleChange}\n                            />\n                            </FormGroup>\n                        </Col>\n                        <Button type=\"submit\">Submit</Button>\n                        <p className=\"pt-2\">Don't have a account yet?<Link to=\"/register\">Sign up!</Link></p>\n                    </Form>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Login);","import React from 'react';\nimport {withRouter, Link} from 'react-router-dom'; \nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button, Row, \n  } from 'reactstrap';\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n            username: \"\",\n            password: \"\",\n            role: \"Supplier\"\n        }\n    }\n\n    handleChange = (e) => {\n        console.log(\"handle change\", e);\n        if (e.target.name === 'username') {\n            this.setState({\n                'username': e.target.value\n            });\n        } else {\n            this.setState({\n                'pass': e.target.value\n            });\n        }\n\n    }\n    registerSubmit = (e) => {\n        // save user to the backend\n        e.preventDefault();\n        console.log(\"redirect...\");\n        this.props.history.push(\"/login\");\n    }\n    render() {\n        return(\n            <div className=\"App\">\n              <Container>\n\n            <Row className=\"pt-5 justify-content-center\">\n            <h2>SupplyChain Register</h2>\n            </Row>\n            <Form className=\"pl-5 pr-5 border login-form\" onSubmit={this.registerSubmit}>\n              {/* <Container className=\"login-border\"> */}\n                <Col className=\"pb-4 font-weight-bold\">\n                  <FormGroup>\n                    <Label for=\"name\">Name</Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      value={this.state.name}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"email\">Email</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      value={this.state.email}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"username\">Username</Label>\n                    <Input\n                      type=\"text\"\n                      name=\"username\"\n                      placeholder=\"Username\"\n                      value={this.state.username}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      value={this.state.password}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"role\">Role</Label>\n                    <Input\n                      type=\"select\"\n                      name=\"role-select\"\n                      value={this.state.role}\n                      onChange={this.handleChange}\n                    >\n                        <option>Supplier</option>\n                        <option>Infrastructure Manager</option>\n                        <option>IOT Support</option>\n                    </Input>\n                  </FormGroup>\n                  <Button color=\"primary\" type=\"submit\">Register</Button>{' '}\n                  <Link className=\"btn btn-danger\" to=\"/\">Cancel</Link>\n                </Col>\n              {/* </Container> */}\n            </Form>\n</Container>\n          </div>\n        )\n    }\n}\n\nexport default withRouter(Register);","import './App.css';\nimport React from 'react';\nimport LoggedInRoutes from './LoggedInRoutes.jsx';\nimport Login from './Login.jsx';\nimport Register from './Register.jsx';\nimport { createBrowserHistory } from 'history';\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  isLoggedIn() {\n    return localStorage.getItem(\"user\") != null;\n  }\n\n  checkRoles() {\n    if (localStorage.getItem(\"user\") == \"support\") {\n      return \"support\";\n    } else if (localStorage.getItem(\"user\") == \"manager\") {\n      return \"manager\";\n    } else {\n      return \"supplier\";\n    }\n  }\n\n  render() {\n    let history = createBrowserHistory();\n    return (\n      <HashRouter forceRefresh={true} history={history}>\n        <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/\"\n                    render={props => {\n                        if (this.isLoggedIn()) {\n                            return <LoggedInRoutes {...props} />;\n                        } else {\n                            return <Redirect to=\"/login\"/>;\n                        }\n                    }} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}