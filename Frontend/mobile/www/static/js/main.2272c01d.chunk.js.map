{"version":3,"sources":["common/CustomTable.jsx","mock_data/customer.js","Dashboard.jsx","common/Navbar.jsx","common/Layout.jsx","InfraManager/InfraDashboard.jsx","InfraManager/InfraWarehouse.jsx","IOTSupport/SupportDashboard.jsx","IOTSupport/SupportWarehouse.jsx","Profile.jsx","mock_data/warehouse.js","IndividualSensor.jsx","Warehouse.jsx","LoggedInRoutes.jsx","Login.jsx","Register.jsx","App.js","reportWebVitals.js","index.js"],"names":["CustomTable","props","state","rows_array","this","title","Table","xs","hover","header","map","hr","trows","r","onClick","e","handleRowClick","React","Component","customerJson","Dashboard","searchWarehouse","preventDefault","loc","lat","lng","markerData","forEach","ware","searchBarValue","location","console","log","setState","zoom","centerLocation","modalToggle","modal","deleteToggle","deleteModal","collapse","isOpen","target","history","push","pathname","name","onMarkerClick","marker","h","split","activeMarker","showTooltip","selectedMarkerInfo","status","onToolTipClose","addWarehouseSubmit","deleteWarehouseSubmit","onMapClick","handleSearchChange","value","table_header","table_data","warehouses","selectedLocation","role","localStorage","getItem","populateWarehouseTable","tmp","orders","Container","className","fluid","Form","onSubmit","Row","Col","md","FormGroup","Input","id","onChange","placeholder","Button","color","type","style","position","width","height","google","center","obj","index","parseFloat","visible","onClose","Badge","Card","CardBody","ButtonGroup","Modal","toggle","ModalHeader","ModalBody","Label","for","ModalFooter","GoogleApiWrapper","apiKey","withRouter","NavBar","profileToggle","handleLogout","clear","Navbar","light","expand","to","Nav","navbar","NavItem","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","Layout","children","InfraDashboard","grabAllWarehouse","customer","concat","grabCustomer","cust","length","customerTable","handleCustomerRowClick","customer_data","customer_marker","isCustomerView","selectedCustomer","handleWarehouseRowClick","backToCustomer","customerHeader","SupportWarehouse","addSensorToggle","addSensorModal","addSensorSubmit","manageSensorToggle","manageSensorModal","manageOrderToggle","manageOrderModal","handleAddSensorChange","addSensor","sensorType","deleteSensorToggle","handleDelete","warehouseId","warehouseName","chart_data","individualSensorId","pageCount","Math","ceil","sensor","perPage","pages","cnt","PaginationItem","PaginationLink","sen","range","dt","x","generic","CardTitle","tag","data","dataKey","stroke","domain","Pagination","first","previous","orderTablePagination","next","last","manageIndividualSensor","SupportDashboard","Profile","expenseToggle","expenseModal","expense_table","expense","src","class","borderless","scope","warehouseJSON","sensorId","Warehouse","handleManageSensorChange","manageSensor","selectedSensor","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","RADIAN","PI","radius","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","orderHistory","pieData","COLORS","labelLine","label","entry","aria-label","LoggedInRoutes","path","component","InfraWarehouse","render","checkRoles","Login","handleChange","submitLogin","username","pass","setItem","Register","registerSubmit","email","password","App","createBrowserHistory","forceRefresh","isLoggedIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2272c01d.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Col, Form,\n    FormGroup, Label, Input,\n    Button, Row, Table, Card, CardImg, CardText, CardBody,\n    CardTitle, CardSubtitle\n  } from 'reactstrap';\n\n  class CustomTable extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              rows_array: []\n          }\n      }\n\n      componentDidMount() {\n          // loop through props and convert to rows\n      }\n\n      render() {\n          return(\n              <div>\n                <h3>{this.props.title}</h3>    \n                <Table xs=\"10\" hover={true}>\n                    <thead>\n                    <tr>\n                        {\n                            this.props.header.map((hr) => {\n                                return(\n                                    <th>{hr}</th>\n                                );\n                            })\n                        }\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.trows.map((r) => {\n                                return(\n                                <tr onClick={(e) => this.props.handleRowClick(e, r)}>\n                                    <td>{r[0]}</td>\n                                    <td>{r[1]}</td>\n                                    <td>{r[2]}</td>\n                                    <td>{r[3]}</td>\n                                    <td>{r[4]}</td>\n                                </tr>);\n                            })\n                        }\n                    </tbody>\n                </Table>\n            </div>\n          );\n      }\n\n  }\n\n  export default CustomTable;","const customerJson = [\n    {\n        \"name\": \"Eric Food Supplier\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Alpha\",\n                \"state\": \"Illinois\",\n                \"location\": {\n                    \"lat\": 40.854885,\n                    \"lng\": -88.081807},\n                \"status\" : \"operational\",\n                \"orders\": 20,\n                \"sensor\": [\n                        {\n                            \"sensorid\": 1,\n                            \"name\": \"Temperature Sensor\",\n                            \"type\": \"temperature\",\n                            \"status\": \"operational\",\n                            \"history\": [[\"11/12/2020-16:15\", \"71\"],\n                            [\"11/12/2020-16:10\", \"71\"],\n                            [\"11/12/2020-16:05\", \"71\"],\n                            [\"11/12/2020-16:00\", \"69\"],\n                            [\"11/12/2020-15:55\", \"69\"],\n                            [\"11/12/2020-15:50\", \"69\"],\n                            [\"11/12/2020-15:45\", \"69\"],\n                            [\"11/12/2020-15:40\", \"67\"],\n                            [\"11/12/2020-15:35\", \"67\"],\n                            [\"11/12/2020-15:30\", \"67\"]]\n                        },\n                        {\n                            \"sensorid\": 1,\n                            \"name\": \"UV Sensor\",\n                            \"type\": \"uv\",\n                            \"status\": \"operational\",\n                            \"history\": [[\"11/12/2020-16:15\", \"2\"],\n                            [\"11/12/2020-16:10\", \"2\"],\n                            [\"11/12/2020-16:05\", \"2\"],\n                            [\"11/12/2020-16:00\", \"2\"],\n                            [\"11/12/2020-15:55\", \"4\"],\n                            [\"11/12/2020-15:50\", \"1\"],\n                            [\"11/12/2020-15:45\", \"1\"],\n                            [\"11/12/2020-15:40\", \"2\"],\n                            [\"11/12/2020-15:35\", \"2\"],\n                            [\"11/12/2020-15:30\", \"2\"]]\n                        },\n                        {\n                            \"sensorid\": 1,\n                            \"name\": \"Humidity Sensor\",\n                            \"type\": \"humidity\",\n                            \"status\": \"operational\",\n                            \"history\": [[\"11/12/2020-16:15\", \"71\"],\n                            [\"11/12/2020-16:10\", \"40\"],\n                            [\"11/12/2020-16:05\", \"40\"],\n                            [\"11/12/2020-16:00\", \"50\"],\n                            [\"11/12/2020-15:55\", \"50\"],\n                            [\"11/12/2020-15:50\", \"60\"],\n                            [\"11/12/2020-15:45\", \"50\"],\n                            [\"11/12/2020-15:40\", \"40\"],\n                            [\"11/12/2020-15:35\", \"30\"],\n                            [\"11/12/2020-15:30\", \"30\"]]\n                        },\n                ]\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Bravo\",\n                \"state\": \"Texas\",\n                \"location\": {\n                    \"lat\": 30.266666,\n                    \"lng\": -97.733330},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Charlie\",\n                \"state\": \"Illinois\",\n                \"location\": {\n                    \"lat\": 38.854885,\n                    \"lng\": -88.081807},\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Delta\",\n                \"state\": \"San Francisco\",\n                \"location\": {\n                    \"lat\": 37.773972,\n                    \"lng\": -122.431297},\n                \"status\" : \"Sensor Issue\",\n                \"orders\": 0\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Epsilon\",\n                \"state\": \"Florida\",\n                \"location\": {\n                    \"lat\": 25.761681 ,\n                    \"lng\": -80.191788},\n                \"status\" : \"operational\",\n                \"orders\": 19\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Foxtrot\",\n                \"state\": \"New York\",\n                \"location\": {\n                    \"lat\": 40.730610 ,\n                    \"lng\": -73.935242},\n                \"status\" : \"No Sensors Detected\",\n                \"orders\": 4\n            }\n        ]\n    },\n    {\n        \"name\": \"Bob the Farmer\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Fruit\",\n                \"state\": \"Michigan\",\n                \"location\": {\n                    \"lat\": 42.279594,\n                    \"lng\": -83.732124\n                },\n                \"status\" : \"operational\",\n                \"orders\": 20\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Dairy\",\n                \"state\": \"Ohio\",\n                \"location\": {\n                    \"lat\": 30.266666,\n                    \"lng\": -97.733330},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Vegtables\",\n                \"state\": \"Ohio\",\n                \"location\": {\n                    \"lat\": 39.983334,\n                    \"lng\": -82.983330\n                },\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Other\",\n                \"state\": \"Illinois\",\n                \"location\": {\n                    \"lat\": 41.881832,\n                    \"lng\": -87.623177},\n                \"status\" : \"error\",\n                \"orders\": 0\n            }\n        ]\n    },\n    {\n        \"name\": \"Mcdonald Food Supplier\",\n        \"warehouses\": [\n            {\n                \"id\" : 1,\n                \"name\": \"Cows\",\n                \"state\": \"California\",\n                \"location\": {\n                    \"lat\": 38.575764,\n                    \"lng\": -121.478851},\n                \"status\" : \"operational\",\n                \"orders\": 20\n            },\n            {\n                \"id\" : 2,\n                \"name\": \"Oranges\",\n                \"state\": \"California\",\n                \"location\": {\n                    \"lat\": 37.804363,\n                    \"lng\": -122.271111},\n                \"status\" : \"operational\",\n                \"orders\": 5\n            },\n            {\n                \"id\" : 3,\n                \"name\": \"Lettice\",\n                \"state\": \"Oklahoma\",\n                \"location\": {\n                    \"lat\": 35.481918,\n                    \"lng\": -97.508469},\n                \"status\" : \"operational\",\n                \"orders\": 100\n            },\n            {\n                \"id\" : 4,\n                \"name\": \"Fish\",\n                \"state\": \"Oregon\",\n                \"location\": {\n                    \"lat\": 45.523064,\n                    \"lng\": -122.676483},\n                \"status\" : \"error\",\n                \"orders\": 0\n            },\n            {\n                \"id\" : 5,\n                \"name\": \"Bread\",\n                \"state\": \"Georgia\",\n                \"location\": {\n                    \"lat\": 33.753746 ,\n                    \"lng\": -84.386330},\n                \"status\" : \"operational\",\n                \"orders\": 19\n            }\n        ]\n    }\n]\n\nexport default customerJson;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    ButtonGroup, \n  } from 'reactstrap';\nimport { useMediaQuery, MediaQuery } from 'react-responsive';\nimport CustomTable from \"./common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport Geocode from \"react-geocode\";\nimport customerJson from './mock_data/customer';\n\n class Dashboard extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            isOpen: false,\n            table_header: [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: customerJson[0].warehouses,\n            deleteModal: false,\n            selectedLocation: {\n                lat: \"\",\n                lng: \"\"\n            },\n            searchBarValue: \"\",\n            centerLocation: {},\n            role: \"\" \n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n        this.populateWarehouseTable();\n    }\n\n    populateWarehouseTable() {\n        let tmp = customerJson[0].warehouses.map((ware) => {\n            return [ware.name, ware.orders, ware.state, ware.status];\n        });\n        this.setState({\n            table_data: tmp\n        });\n    }\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n        e.preventDefault();\n        let loc = {\n            lat: -1, \n            lng: -1\n        };\n        this.state.markerData.forEach((ware) => {\n            if (this.state.searchBarValue === ware.state ) {\n                // zoom in\n                loc = ware.location;\n            }\n        });\n        if (loc.lat < 0) {\n             console.log(\"Not found\");\n        } else {\n            this.setState({\n                zoom: 14,\n                centerLocation: loc\n            });\n        }\n    }\n\n    modalToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    deleteToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            deleteModal: !this.state.deleteModal\n        });\n    }\n\n    collapse = (e) => {\n        e.preventDefault();\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n        this.props.history.push({\n            pathname: '/warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n\n    }\n\n    onMarkerClick = (props, marker) => {\n        console.log(props);\n        let h = props.name.split(\"-\");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1]\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        console.log(e);\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    addWarehouseSubmit = () => {\n        // use react geocode to convert address to lat/lng\n        // Geocode.fromAddress(\"address\").then(\n        //     (response) => {\n        //         const { lat, lng } = response.results[0].geometry.location;\n        //         console.log(lat, lng);\n        //     },\n        //     (error) => {\n        //         console.log(error);\n        //     }\n        // );\n    }\n\n    deleteWarehouseSubmit = () => {\n        // delete warehouse from the network for the specific customer\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        console.log(e);\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n    handleSearchChange = (e) => {\n        e.preventDefault();\n        console.log(e.target.value);\n        this.setState({\n            searchBarValue: e.target.value\n        });\n    }\n\n    render () {\n        return(\n                <Container className=\"pt-2\" fluid={true}>\n                    <Form onSubmit={this.searchWarehouse}>\n                        <Row>\n                            <Col md=\"7\" xs=\"9\">\n                            <FormGroup>\n                                <Input name=\"search\"\n                                id=\"search\"\n                                onChange={this.handleSearchChange}\n                                value={this.state.searchBarValue}\n                                placeholder=\"Enter a address, zip code or city....\" />\n                            </FormGroup>\n                            </Col>\n                            <Col md=\"1\" xs=\"1\">\n                            <Button color=\"primary\" type=\"submit\">Submit</Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs= \"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                center={this.state.centerLocation}\n                                onClick={this.onMapClick}\n                                zoom={14}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.name}-${obj.status}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                    <Row>\n                                        <Col md=\"9\">\n                                            <h2>List of Warehouses</h2>\n                                        </Col>\n                                        <Col md=\"1\">\n                                            <ButtonGroup>\n                                                <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>\n                                                <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>\n                                            </ButtonGroup>\n                                        </Col>\n                                    </Row>\n                                    <Table xs=\"10\" hover={true}>\n                                        <thead>\n                                        <tr>\n                                            {\n                                                this.state.table_header.map((hr) => {\n                                                    return(\n                                                        <th>{hr}</th>\n                                                    );\n                                                })\n                                            }\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                this.state.table_data.map((r) => {\n                                                    return(\n                                                    <tr onClick={(e) => this.handleRowClick(e, r)}>\n                                                        <td>{r[0]}</td>\n                                                        <td>{r[1]}</td>\n                                                        <td>{r[2]}</td>\n                                                        <td>{r[3]}</td>\n                                                        <td>{r[4]}</td>\n                                                    </tr>);\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Modal isOpen={this.state.deleteModal} toggle={this.deleteToggle}>\n                        <ModalHeader toggle={this.deleteToggle}>Delete Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.deleteWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"select\" name=\"warehouse_delete\">\n                                        {\n                                            this.state.table_data.map((ware) => {\n                                                return(<option value={ware[0]}>{ware[0]}</option>);\n                                            })\n                                        }\n                                    </Input>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>{' '}\n                            <Button color=\"info\" onClick={this.deleteToggle}>Go Back</Button>\n                        </ModalFooter>\n                    </Modal>\n\n                    <Modal isOpen={this.state.modal} toggle={this.modalToggle}>\n                        <ModalHeader toggle={this.modalToggle}>Add Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.addWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Name here...\" />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label>Address</Label>\n                                    <Input name=\"address\"/>\n                                    <Row>\n                                        <Col>\n                                            <Label>City</Label>\n                                            <Input name=\"city\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>State</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>Zipcode</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                    </Row>\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Schedule(grab every second)</Label>\n                                    <Input type=\"number\" name=\"email\" id=\"exampleEmail\" placeholder=\"0\" />\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>{' '}\n                            <Button color=\"danger\" onClick={this.modalToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </Container>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(Dashboard));","import React from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Dropdown, DropdownItem, DropdownToggle, DropdownMenu\n  } from 'reactstrap';\n  import {withRouter, Link} from 'react-router-dom'; \n\nclass NavBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            profileToggle: false,\n            role: localStorage.getItem(\"user\") ? \n            localStorage.getItem(\"user\") : \"\"\n        }\n    }\n\n    \n\n    profileToggle = () => {\n        this.setState({\n            profileToggle: !this.state.profileToggle\n        });\n    }\n\n    handleLogout = (e) => {\n        localStorage.clear();\n        this.props.history.push('/login');\n    }\n\n    //prop that checks role\n\n    render() {\n        return(\n            <div>\n                <Navbar color=\"light\" light expand=\"md\">\n                    <Link className=\"navbar-brand\" to=\"/\">Welcome {this.state.role}!</Link>\n                    <Nav className=\"mr-auto\" navbar>\n                        <NavItem>\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\n                        </NavItem>\n                    </Nav>\n                    <Dropdown className=\"pr-2\" isOpen={this.state.profileToggle} toggle={this.profileToggle}>\n                        <DropdownToggle color=\"info\" caret>\n                            Profile\n                            </DropdownToggle>\n                        <DropdownMenu>\n                            <DropdownItem header>Profile</DropdownItem>\n                            <Link className=\"dropdown-item\" to=\"/profile\">Settings</Link>\n                            <DropdownItem divider />\n                            <DropdownItem onClick={this.handleLogout}>Logout</DropdownItem>\n                        </DropdownMenu>\n                        </Dropdown>\n                </Navbar>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(NavBar);","import React from 'react';\nimport Navbar from './Navbar.jsx';\n\nclass Layout extends React.Component {\n    render() {\n        const container = {\n            \"paddingTop\": \"100px\",\n            \"display\": \"flex\",\n            \"flexDirection\": \"column\",\n            \"minHeight\": \"90vh\"\n        }\n        return(\n            <div>\n                <Navbar />\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Layout;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, ButtonGroup, Row,\n    Card, CardText, CardBody, CardTitle, CardSubtitle,\n    Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer';\n\nclass InfraDashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modal: false,\n            table_header: [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: [],\n            customerTable: [],\n            customerHeader: [\"Name\", \"# of Warehouses\"],\n            isCustomerView: true,\n            selectedCustomer: \"\",\n            deleteModal: false,\n            searchBarValue: \"\",\n            zoom: 14,\n            centerLocation: {}\n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n        this.grabCustomer();\n        this.grabAllWarehouse();\n    }\n\n    grabAllWarehouse = () => {\n        let warehouses = []\n        customerJson.forEach((customer) => {\n            let tmp = customer.warehouses.map((ware) => {\n                ware.customer = customer.name;\n                return ware;\n            });\n            console.log(tmp);\n            warehouses = warehouses.concat(tmp);\n        });\n        this.setState({\n            markerData: warehouses\n        });\n    }\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n        e.preventDefault();\n        let loc = {\n            lat: -1, \n            lng: -1\n        };\n        this.state.markerData.forEach((ware) => {\n            if (this.state.searchBarValue === ware.state ) {\n                // zoom in\n                loc = ware.location;\n            }\n        });\n        if (loc.lat < 0) {\n             console.log(\"NOt found\");\n        } else {\n            this.setState({\n                zoom: 14,\n                centerLocation: loc\n            });\n        }\n    }\n\n    grabCustomer = () =>  {\n        let cust = []\n        customerJson.forEach((customer) => {\n            let tmp = [customer.name, customer.warehouses.length];\n            cust.push(tmp);\n        });\n        this.setState({\n            customerTable: cust\n        });\n    }\n\n    modalToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    deleteToggle = (e) => {\n        e.preventDefault();\n        this.setState({\n            deleteModal: !this.state.deleteModal\n        });\n    }\n\n    handleCustomerRowClick = (e, r) => {\n        // handle clicking a row\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n\n        // setup table\n        let customer_data = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_data = customer.warehouses.map((ware) => {\n                    return [ware.name, ware.orders, ware.state, ware.status];\n                });\n            }\n        });\n\n        //setup customer markers\n        let customer_marker = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_marker = customer.warehouses.map((ware) => {\n                    return ware;\n                });\n            }\n        });\n\n        this.setState({\n            isCustomerView: !this.state.isCustomerView,\n            selectedCustomer: r[0],\n            table_data: customer_data,\n            markerData: customer_marker\n        });\n    }\n\n    handleWarehouseRowClick = (e, r) =>{\n        // handle the warehouse row click\n        this.props.history.push({\n            pathname: '/manager_warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n    }\n\n    backToCustomer = () => {\n        this.setState({\n            isCustomerView: !this.state.isCustomerView\n        });\n    }\n\n    onMarkerClick = (props, marker) => {\n        console.log(props);\n        let h = props.name.split(\"-\");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1],\n                customer: h[2] ? h[2] : null\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        console.log(e);\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        console.log(e);\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n    handleSearchChange = (e) => {\n        e.preventDefault();\n        console.log(e.target.value);\n        this.setState({\n            searchBarValue: e.target.value\n        });\n    }\n\n    render () {\n        return(\n                <div className=\"pt-2 container-fluid\">\n                    <Form>\n                        <Row>\n                            <Col xs=\"9\" md=\"7\">\n                                <FormGroup>\n                                    <Input name=\"search\" \n                                    id=\"search\"\n                                    onChange={this.handleSearchChange}\n                                    value={this.state.searchBarValue}\n                                    placeholder=\"Enter a address, zip code or city....\" />\n                                </FormGroup>\n                            </Col>\n                            <Col xs=\"1\" md=\"1\">\n                                <Button color=\"primary\" onClick={this.searchWarehouse}>Submit</Button>\n                            </Col>\n                            { !this.state.isCustomerView ?\n                            <Col xs=\"12\" md=\"5\">\n                                <h2 >Currently Viewing: {this.state.selectedCustomer}</h2>\n                            </Col>\n                            : null}\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs=\"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                center={this.state.centerLocation}\n                                onClick={this.onMapClick}\n                                zoom={14}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.name}-${obj.status}-${obj.customer}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            {\n                                                                this.state.selectedMarkerInfo.customer ?\n                                                                <Col>\n                                                                    <p>{this.state.selectedMarkerInfo.customer}</p>\n                                                                </Col> : null\n                                                            }\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                { this.state.isCustomerView ? \n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Customers</h2>\n                                            </Col>\n                                            \n                                        </Row> \n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.customerHeader}\n                                            trows={this.state.customerTable}\n                                            handleRowClick={this.handleCustomerRowClick}\n                                            />\n                                    </> :\n                                    <>\n                                        <Row>\n                                            <Col md=\"7\">\n                                                <h2>List of Warehouses</h2>\n                                            </Col>\n                                            <Col md=\"5\">\n                                            \n                                            <ButtonGroup>\n                                                <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>\n                                                <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>\n                                                <Button color=\"info\" onClick={this.backToCustomer}>Go Back</Button>\n                                            </ButtonGroup>\n                                        </Col>\n                                        </Row>\n                                        <Table xs=\"10\" hover={true}>\n                                        <thead>\n                                        <tr>\n                                            {\n                                                this.state.table_header.map((hr) => {\n                                                    return(\n                                                        <th>{hr}</th>\n                                                    );\n                                                })\n                                            }\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                            {\n                                                this.state.table_data.map((r) => {\n                                                    return(\n                                                    <tr onClick={(e) => this.handleWarehouseRowClick(e, r)}>\n                                                        <td>{r[0]}</td>\n                                                        <td>{r[1]}</td>\n                                                        <td>{r[2]}</td>\n                                                        <td>{r[3]}</td>\n                                                        <td>{r[4]}</td>\n                                                    </tr>);\n                                                })\n                                            }\n                                        </tbody>\n                                    </Table>\n                                        </>\n                                }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Modal isOpen={this.state.deleteModal} toggle={this.deleteToggle}>\n                        <ModalHeader toggle={this.deleteToggle}>Delete Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.deleteWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"select\" name=\"warehouse_delete\">\n                                        {\n                                            this.state.table_data.map((ware) => {\n                                                return(<option value={ware[0]}>{ware[0]}</option>);\n                                            })\n                                        }\n                                    </Input>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"danger\" onClick={this.deleteToggle}>Delete</Button>{' '}\n                            <Button color=\"primary\" onClick={this.deleteToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n\n                    <Modal isOpen={this.state.modal} toggle={this.modalToggle}>\n                        <ModalHeader toggle={this.modalToggle}>Add Warehouse</ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.addWarehouseSubmit}>\n                                <FormGroup>\n                                    <Label for=\"exampleEmail\">Warehouse Name</Label>\n                                    <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Name here...\" />\n                                </FormGroup>\n                                <FormGroup>\n                                    <Label>Address</Label>\n                                    <Input name=\"address\"/>\n                                    <Row>\n                                        <Col>\n                                            <Label>City</Label>\n                                            <Input name=\"city\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>State</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                        <Col>\n                                            <Label>Zipcode</Label>\n                                            <Input name=\"address\"/>\n                                        </Col>\n                                    </Row>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color=\"primary\" onClick={this.modalToggle}>Add</Button>{' '}\n                            <Button color=\"danger\" onClick={this.modalToggle}>Cancel</Button>\n                        </ModalFooter>\n                    </Modal>\n                </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(InfraDashboard));","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container, Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport { Link } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer.js';\n\nclass SupportWarehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : null,\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null,\n            manageSensorModal: false,\n            deleteToggle: false\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    addSensorToggle = () => {\n        this.setState({\n            addSensorModal: !this.state.addSensorModal\n        });\n    }\n\n    addSensorSubmit = (e) => {\n        // add sensor\n        e.preventDefault();\n        console.log(\"Adding sensors..\");\n    }\n\n    manageSensorToggle = () => {\n        this.setState({\n            manageSensorModal: !this.state.manageSensorModal\n        });\n    }\n    manageOrderToggle = () => {\n        this.setState({\n            manageOrderModal: !this.state.manageOrderModal\n        });\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    handleAddSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            addSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    deleteSensorToggle = () => {\n        this.setState({\n            deleteToggle: !this.state.deleteToggle\n        });\n    }\n\n    handleDelete = (e) => {\n        e.preventDefault();\n        // handle delete action\n        this.deleteSensorToggle();\n    }\n\n    orderTablePagination(index) {\n        // organize order table pagination\n        const pageCount = Math.ceil(customerJson[0].warehouses[0].sensor[index].history.length / this.state.perPage);\n        const pages = [];\n        let cnt = 1;\n        while (pageCount >= cnt) {\n            pages.push(<PaginationItem>\n                <PaginationLink >\n                        {cnt}\n                </PaginationLink>\n            </PaginationItem>);\n            cnt += 1;\n        }\n        return pages;\n    }\n\n    render() {\n        const pages = [1, 2, 3];\n\n        return(\n            <Container className=\"pb-5\" fluid={true}>\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"2\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"2\">\n                        <Button color=\"primary\" onClick={this.addSensorToggle}>Add Sensor</Button>{' '}\n                        <Link className=\"btn btn-info\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    {\n                        customerJson[0].warehouses[0].sensor.map((sen, index) => {\n                            let header = [];\n                            let range = [0, 100];\n                            if (sen.type === \"temperature\") {\n                                header = [\"Time\", \"Temperature\"];\n                            } else if (sen.type === \"uv\") {\n                                header = [\"Time\", \"UV Index\"];\n                                range = [0, 10];\n                            } else if (sen.type === \"humidity\") {\n                                header = [\"Time\", \"Concentration\"];\n                            }\n\n                            const chart_data = [];\n                            sen.history.forEach((dt) => {\n                                let tmp = {\"name\": \"\", \"generic\": \"\"};\n                                let x = dt[0].split(\"-\");\n                                tmp.name = x[1];\n                                tmp.generic = dt[1];\n                                chart_data.push(tmp);\n                            });\n                            \n                            return(\n                                <Col className=\"pb-4\" xs=\"auto\" md=\"4\">\n                                    <Card width=\"100%\">\n                            <CardBody>\n                                <CardTitle tag=\"h5\">{sen.name}</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"generic\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={range}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={header} \n                                    trows={sen.history} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Pagination>\n                                    <PaginationItem>\n                                        <PaginationLink first/>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink previous />\n                                    </PaginationItem>\n                                    {\n                                        this.orderTablePagination(index)\n                                    }\n                                    <PaginationItem>\n                                        <PaginationLink next />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink last />\n                                    </PaginationItem>\n                                </Pagination>\n                                <Button color=\"primary\" onClick={this.manageSensorToggle}>Manage Sensor</Button>{' '}\n                                <Button color=\"danger\" onClick={this.deleteSensorToggle}>Delete</Button>\n                            </CardBody>\n                        </Card>\n                                </Col>\n                            );\n                        })\n                    }\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                    <option value=\"wind\">Wind</option>\n                                </Input>\n                            </FormGroup>\n                            { this.state.addSensor.sensorType === \"temperature\" ? \n                            <FormGroup>\n                                <Label for=\"exampleSelectMulti\">Unit Type</Label>\n                                <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\">\n                                <option>Fahrenheit</option>\n                                <option>Celsius</option>\n                                </Input>\n                            </FormGroup> : null}\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Threshold</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"\" />\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"danger\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.manageIndividualSensor}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\">\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Action</Label>\n                                <Input type=\"select\" name=\"select\">\n                                    <option value=\"on\">Turn On</option>\n                                    <option value=\"off\">Turn Off</option>\n                                    <option value=\"maintain\">Maintenance</option>\n                                </Input>\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" >Update</Button>{' '}\n                                <Button color=\"danger\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter> \n                        </Form>\n                    </ModalBody>  \n                </Modal>\n\n                <Modal isOpen={this.state.deleteToggle} toggle={this.deleteSensorToggle}>\n                    <ModalHeader toggle={this.deleteSensorToggle}>Are you sure?</ModalHeader>\n                    <ModalBody>\n                        <p>Deleting sensor will remove it from the network.</p>\n                    </ModalBody> \n                        <ModalFooter>\n                                <Button color=\"primary\" onClick={this.handleDelete} >Continue</Button>{' '}\n                                <Button color=\"danger\" onClick={this.deleteSensorToggle}>Cancel</Button>\n                    </ModalFooter> \n                </Modal>\n            </Container>\n        );\n    }\n}\n\nexport default SupportWarehouse;","import React from 'react';\nimport {\n    Collapse, Col, Table, Form, Label,\n    FormGroup, Input, Badge, Container,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport { withRouter } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer';\n\nclass SupportDashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            table_header: [\"Name\", \"Orders\", \"Location\", \"Status\"],\n            table_data: [],\n            showTooltip: {},\n            activeMarker: null,\n            selectedMarkerInfo: {\n                name: \"\",\n                status: \"Unknown\"\n            },\n            markerData: [],\n            customerTable: [],\n            customerHeader: [\"Name\", \"# of Warehouses\"],\n            isCustomerView: true,\n            selectedCustomer: \"\",\n            searchBarValue: \"\",\n            zoom: 14,\n            centerLocation: {}\n        }\n    }\n\n    componentDidMount() {\n        const role = localStorage.getItem('user');\n\n        this.grabCustomer();\n        this.grabAllWarehouse();\n        // grab all warehouse in user's home region and load on map\n        // default detailed warehouse is first on the list \n        // run a condition check on role\n        // Manager and IOT Support will get table of customer\n    }\n\n    grabAllWarehouse = () => {\n\n        let warehouses = []\n        customerJson.forEach((customer) => {\n            let tmp = customer.warehouses.map((ware) => {\n                ware.customer = customer.name;\n                return ware;\n            });\n            console.log(tmp);\n            warehouses = warehouses.concat(tmp);\n        });\n        this.setState({\n            markerData: warehouses\n        });\n    }\n\n    // need list of longitude and latitude to define marker locations\n    searchWarehouse = (e) => {\n        // search warehouse\n        e.preventDefault();\n        let loc = {\n            lat: -1, \n            lng: -1\n        };\n        this.state.markerData.forEach((ware) => {\n            if (this.state.searchBarValue === ware.state ) {\n                // zoom in\n                loc = ware.location;\n            }\n        });\n        if (loc.lat < 0) {\n             console.log(\"Not found\");\n        } else {\n            this.setState({\n                zoom: 14,\n                centerLocation: loc\n            });\n        }\n    }\n\n    grabCustomer = () =>  {\n        let cust = []\n        customerJson.forEach((customer) => {\n            let tmp = [customer.name, customer.warehouses.length];\n            cust.push(tmp);\n        });\n        this.setState({\n            customerTable: cust\n        });\n    }\n\n    handleCustomerRowClick = (e, r) => {\n        // handle clicking a row\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n\n        // setup table\n        let customer_data = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_data = customer.warehouses.map((ware) => {\n                    return [ware.name, ware.orders, ware.state, ware.status];\n                });\n            }\n        });\n\n        //setup customer markers\n        let customer_marker = [];\n        customerJson.forEach((customer) => {\n            if (customer.name === r[0]) {\n                customer_marker = customer.warehouses.map((ware) => {\n                    return ware;\n                });\n            }\n        });\n        // marker\n\n        this.setState({\n            isCustomerView: !this.state.isCustomerView,\n            selectedCustomer: r[0],\n            table_data: customer_data,\n            markerData: customer_marker\n        });\n    }\n\n    handleWarehouseRowClick = (e, r) =>{\n        // handle the warehouse row click\n        this.props.history.push({\n            pathname: '/support_warehouse',\n            state: {\n                name: r[0]\n            }\n        });\n    }\n\n    backToCustomer = () => {\n        this.grabAllWarehouse();\n        this.setState({\n            isCustomerView: !this.state.isCustomerView\n        });\n    }\n\n    onMarkerClick = (props, marker) => {\n        let h = props.name.split(\"-\");\n        console.log(h);\n        this.setState({\n            activeMarker: marker,\n            showTooltip: true,\n            selectedMarkerInfo: {\n                name: h[0],\n                status: h[1],\n                customer: h[2] ? h[2] : null\n            }\n        });\n    }\n\n    onToolTipClose = (e) => {\n        // e.preventDefault();\n        this.setState({\n            activeMarker: null,\n            showTooltip: false\n        });\n    }\n\n    // close tooltip if user clicks off the tooltip\n    onMapClick = (e) => {\n        if (this.state.showTooltip) {\n            this.setState({\n                activeMarker: null,\n                showTooltip: false\n            });\n        }\n    }\n\n    handleSearchChange = (e) => {\n        e.preventDefault();\n        console.log(e.target.value);\n        this.setState({\n            searchBarValue: e.target.value\n        });\n    }\n\n    render () {\n        return(\n                <div className=\"pt-2 container-fluid\">\n                    <Form onSubmit={this.searchWarehouse}>\n                        <Row>\n                            <Col xs=\"9\" md=\"7\">\n                                <FormGroup>\n                                    <Input name=\"search\"\n                                    id=\"search\"\n                                    onChange={this.handleSearchChange}\n                                    value={this.state.searchBarValue}\n                                    placeholder=\"Enter a address, zip code or city....\" />\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"1\" xs=\"1\">\n                                <Button color=\"primary\" type=\"submit\">Submit</Button>\n                            </Col>\n                            { !this.state.isCustomerView ?\n                            <Col md=\"5\">\n                                <h2 >Currently Viewing: {this.state.selectedCustomer}</h2>\n                            </Col>\n                            : null}\n                        </Row>\n                    </Form>\n                    <Row>\n                        <Col xs=\"12\" md=\"7\">\n                        <div style={{ position: 'relative', width: '100%', height: '80vh' }}>\n                            <Map \n                                google={this.props.google} \n                                center={this.state.centerLocation}\n                                onClick={this.onMapClick}\n                                zoom={this.state.zoom}>\n                                {\n                                    this.state.markerData.map(\n                                        (obj, index) => {\n                                            let lat = parseFloat(obj.location.lat, 10);\n                                            let lng = parseFloat(obj.location.lng, 10);\n                                            return(\n                                                <Marker\n                                                    key={index}\n                                                    name={`${obj.name}-${obj.status}-${obj.customer}`}\n                                                    onClick={this.onMarkerClick}\n                                                    position={{\n                                                        lat: lat,\n                                                        lng: lng\n                                                    }}\n                                                    />\n                                    );})\n                                }\n                                    <InfoWindow\n                                                visible={this.state.showTooltip}\n                                                marker={this.state.activeMarker}\n                                                onClose={this.onToolTipClose}\n                                                >\n                                                    <div>\n                                                        <Row>\n                                                            <Col>\n                                                                <h6>Warehouse {this.state.selectedMarkerInfo.name}</h6>\n                                                            </Col>\n                                                        </Row>\n                                                        <Row className=\"justify-content-center\">\n                                                            {\n                                                                this.state.selectedMarkerInfo.customer ?\n                                                                <Col>\n                                                                    <p>{this.state.selectedMarkerInfo.customer}</p>\n                                                                </Col> : null\n                                                            }\n                                                            <Col>\n                                                                <Badge \n                                                                    color={this.state.selectedMarkerInfo.status === \"error\" ? \n                                                                    \"danger\" : \"success\"}>\n                                                                    {this.state.selectedMarkerInfo.status}\n                                                                </Badge>\n                                                            </Col>\n                                                        </Row>\n                                                    </div>\n                                        </InfoWindow>\n                            </Map>\n                            </div>\n                        </Col>\n                        <Col xs=\"12\" md=\"5\">\n                            <Card height='100%' width=\"100%\">\n                                <CardBody>\n                                { this.state.isCustomerView ? \n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Customers</h2>\n                                            </Col>\n                                            \n                                        </Row> \n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.customerHeader}\n                                            trows={this.state.customerTable}\n                                            handleRowClick={this.handleCustomerRowClick}\n                                            />\n                                    </> :\n                                    <>\n                                        <Row>\n                                            <Col md=\"8\">\n                                                <h2>List of Warehouses</h2>\n                                            </Col>\n                                            <Col md=\"4\">\n                                            <Button color=\"info\" onClick={this.backToCustomer}>Go Back</Button>\n                                        </Col>\n                                        </Row>\n                                        <CustomTable \n                                            title=\"\"\n                                            header={this.state.table_header}\n                                            trows={this.state.table_data}\n                                            handleRowClick={this.handleWarehouseRowClick}\n                                            />\n                                        </>\n                                }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"\")\n  })(withRouter(SupportDashboard));","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container, Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"../common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport { Link } from \"react-router-dom\";\nimport customerJson from '../mock_data/customer.js';\n\n\nclass SupportWarehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : null,\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    orderTablePagination(index) {\n        // organize order table pagination\n        const pageCount = Math.ceil(customerJson[0].warehouses[0].sensor[index].history.length / this.state.perPage);\n        const pages = [];\n        let cnt = 1;\n        while (pageCount >= cnt) {\n            pages.push(<PaginationItem>\n                <PaginationLink >\n                        {cnt}\n                </PaginationLink>\n            </PaginationItem>);\n            cnt += 1;\n        }\n        return pages;\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    render() {\n        const pages = [1, 2, 3];\n        return(\n            <Container className=\"pb-5\" fluid={true}>\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"2\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"2\">\n                        <Link className=\"btn btn-info\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                {\n                        customerJson[0].warehouses[0].sensor.map((sen, index) => {\n                            let header = [];\n                            let range = [0, 100];\n                            if (sen.type === \"temperature\") {\n                                header = [\"Time\", \"Temperature\"];\n                            } else if (sen.type === \"uv\") {\n                                header = [\"Time\", \"UV Index\"];\n                                range = [0, 10];\n                            } else if (sen.type === \"humidity\") {\n                                header = [\"Time\", \"Concentration\"];\n                            }\n\n                            const chart_data = [];\n                            sen.history.forEach((dt) => {\n                                let tmp = {\"name\": \"\", \"generic\": \"\"};\n                                let x = dt[0].split(\"-\");\n                                tmp.name = x[1];\n                                tmp.generic = dt[1];\n                                chart_data.push(tmp);\n                            });\n                            \n                            return(\n                                <Col className=\"pb-4\" xs=\"auto\" md=\"4\">\n                                    <Card width=\"100%\">\n                            <CardBody>\n                                <CardTitle tag=\"h5\">{sen.name}</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"generic\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={range}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={header} \n                                    trows={sen.history} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Pagination>\n                                    <PaginationItem>\n                                        <PaginationLink first/>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink previous />\n                                    </PaginationItem>\n                                    {\n                                        this.orderTablePagination(index)\n                                    }\n                                    <PaginationItem>\n                                        <PaginationLink next />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink last />\n                                    </PaginationItem>\n                                </Pagination>\n                            </CardBody>\n                        </Card>\n                                </Col>\n                            );\n                        })\n                    }\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default SupportWarehouse;","import React from 'react';\nimport {\n    Col, Form, Table,\n    FormGroup, Input,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle, Container,\n    Modal, ModalHeader, ModalBody, ModalFooter\n  } from 'reactstrap';\n  import CustomTable from \"./common/CustomTable.jsx\";\n  import { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid } from 'recharts';\n  import {withRouter, Link} from 'react-router-dom';\n\n/*\nTODO: Work on modal forms for edit profile, edit billing and view charts\n*/\n  class Profile extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n            chart_data: [],\n            role: localStorage.getItem(\"user\") ? \n            localStorage.getItem(\"user\") : \"\",\n            expenseModal: false,\n            expense_table: []\n          }\n      }\n\n      componentDidMount() {\n\n        // test data\n        this.setState({\n            chart_data : [\n            {name: '15:05', expense: 68},\n            {name: '15:10', expense: 69}, \n            {name: '15:15', expense: 66}, \n            {name: '15:20', expense: 66},\n            {name: '15:25', expense: 68},\n            {name: '15:30', expense: 70},\n            {name: '15:35', expense: 71},\n            {name: '15:40', expense: 71},\n            {name: '15:45', expense: 71},\n            {name: '15:50', expense: 75},\n            {name: '15:55', expense: 75},\n            {name: '16:00', expense: 76}\n        ],\n        expense_table: [\n            ['15:05', \"map\", 68],\n            ['15:10', \"map\",69], \n            ['15:15', \"map\",66], \n            ['15:20', \"sensor\",66],\n            ['15:25', \"map\", 68],\n            ['15:30', \"sensor\",70],\n            ['15:35', \"sensor\", 71],\n            ['15:40', \"map\",71],\n            ['15:45', \"map\",71],\n            ['15:50', \"map\",75],\n            ['15:55', \"map\",75],\n            ['16:00', \"sensor\",76]\n        ]\n        });\n    }\n\n    expenseToggle = () => {\n        this.setState({\n            expenseModal: !this.state.expenseModal\n        });\n    }\n      render() {\n          return(\n                <Container className=\"pt-4 pb-4\">\n                    \n                    <Row className=\"justify-content-md-center\">\n                        \n                        <Col xs={12} md={5}>\n                            <h2>Profile</h2>\n                            <Row>\n                                <img src=\"./logo512.png\" style={{height: '200px', width:'200px'}} class=\"rounded float-left\" />\n                            </Row>\n                            <Row>\n                                <Table borderless={true}>\n                                    <thead>\n                                        <tr>\n                                            <th>Name of the User</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <th scope=\"row\">Role:</th>\n                                            <th scope=\"row\">{this.state.role}</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Address</th>\n                                            <th scope=\"row\">1234 Rainbow Rd</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\"></th>\n                                            <th scope=\"row\">City, State Zipcode</th>\n                                        </tr>\n                                        <tr>\n                                        <th scope=\"row\">Email:</th>\n                                            <th scope=\"row\">test@test.com</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Phone Number:</th>\n                                            <th scope=\"row\">+1(888)-009-1234</th>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button color=\"primary\">Edit Profile</Button>\n                            </Row>\n                            \n                        </Col>\n                        <Col className=\"pt-2\" md={7}>\n                                <h2>Billing Information</h2>\n                            <Row>\n                                <Table borderless={true}>\n                                    <tbody>\n                                        <tr>\n                                            <th scope=\"row\">Credit Card Number:</th>\n                                            <th scope=\"row\">*******1889</th>\n                                        </tr>\n                                        <tr>\n                                            <th scope=\"row\">Billing Address:</th>\n                                            <th scope=\"row\">1234 Rainbow Rd</th>\n                                        </tr>\n                                        <tr>\n                                        <th scope=\"row\"></th>\n                                            <th scope=\"row\">City, State Zipcode</th>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                {/* <Button>Edit Billing</Button> */}\n                            </Row>\n                            <Row className=\"pl-2 pt-4\">\n                                <h2>Track Expenses</h2>\n                            </Row>\n                            <Row>\n                                <ResponsiveContainer className=\"pt-2\" width=\"100%\" height={500}>\n                                    <LineChart  data={this.state.chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"expense\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={[0, 100]}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                            </Row>\n                            <Button color=\"primary\" onClick={this.expenseToggle}>See Details</Button>\n                        </Col>\n                    </Row>\n\n                <Modal isOpen={this.state.expenseModal} toggle={this.expenseToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Detailed Expense</ModalHeader>\n                    <ModalBody>\n                        <CustomTable \n                            title=\"\" \n                            header={[\"Time\", \"Category\", \"Expense\"]} \n                            trows={this.state.expense_table} \n                            handleRowClick={() => {}}/>\n                    </ModalBody> \n                    <ModalFooter>\n                        <Button color=\"primary\" onClick={this.expenseToggle}>Done</Button>\n                    </ModalFooter>       \n                </Modal>\n                </Container>\n          );\n      }\n  }\n\n  export default Profile;","const warehouseJSON = [\n    {\n        history: [\n            [1, \"Corn\", \"San Francisco\", \"Las Vegas\"],\n            [2, \"Fruit\", \"San Francisco\", \"New York\"], \n            [3, \"Fruit\", \"San Francisco\", \"Seattle\"],\n            [4, \"Food\", \"San Francisco\", \"Miami\"],\n            [5, \"Milk\", \"Kansas\", \"San Francisco\"],\n            [6, \"Avacado\", \"Los Angeles\", \"Boston\"],\n            [7, \"Melon\", \"Los Angeles\", \"Boston\"],\n            [8, \"Cherries\", \"Sacramento\", \"Florida\"],\n            [9, \"Oranges\", \"Oakland\", \"Michigan\"],\n            [10, \"Beef\", \"Wisconsin\", \"San Francsico\"]\n        ]\n    },\n    {\n        sensorId: 1,\n        type: \"temperature\",\n        status: \"operational\",\n        history: [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"],\n            [\"11/12/2020-15:55\", \"69\"],\n            [\"11/12/2020-15:50\", \"69\"],\n            [\"11/12/2020-15:45\", \"69\"],\n            [\"11/12/2020-15:40\", \"67\"],\n            [\"11/12/2020-15:35\", \"67\"],\n            [\"11/12/2020-15:30\", \"67\"]\n        ]\n    }\n]\n\nexport default warehouseJSON;","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader,\n    ModalBody, ModalFooter, Container,\n    Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"./common/CustomTable.jsx\";\n\nclass IndividualSensor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pages: 1,\n            selected_sensor: null\n        }\n    }\n    componentDidMount() {\n        // load sensor data\n        // calculate number of pages \n        // and separate out history based on pages\n    }\n\n    handleRowClick = () => {\n        // handle row click\n    }\n\n    render() {\n        const test = [\n            [\"11/12/2020-16:15\", \"71\"],\n            [\"11/12/2020-16:10\", \"71\"],\n            [\"11/12/2020-16:05\", \"71\"],\n            [\"11/12/2020-16:00\", \"69\"]\n        ];\n        const temperature_header = [\"Time\", \"Temperature\"];\n        return(\n            <>\n                <h5>Sensor {this.state.selected_sensor}</h5>\n                <Table>\n                    <tbody>\n                        <tr>\n                            <th scope=\"row\">Type:</th>\n                            <td scope=\"row\">Temperature</td>\n                        </tr>\n                        <tr>\n                            <th scope=\"row\">Status:</th>\n                            <td scope=\"row\">Operational</td>\n                        </tr>\n                    </tbody>\n                </Table>\n                <h5>History</h5>\n                <CustomTable \n                    title=\"History\" \n                    header={temperature_header} \n                    trows={test} \n                    handleRowClick={this.handleRowClick}/>\n                <Pagination aria-label=\"Page navigation example\">\n                <PaginationItem>\n                    <PaginationLink first onClick={()=> {console.log(\"load first\")}}/>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink previous />\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    1\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    2\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink >\n                    3\n                    </PaginationLink>\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink next />\n                </PaginationItem>\n                <PaginationItem>\n                    <PaginationLink last />\n                </PaginationItem>\n                </Pagination>\n            </>\n        );\n    }\n}\n\nexport default IndividualSensor;","import React from 'react';\nimport {\n    Collapse, Col, Form, Table,\n    FormGroup, Input, Label, FormText,\n    Button, Row, Card, CardText, CardBody,\n    CardTitle, CardSubtitle,Modal, ModalHeader, ModalBody, ModalFooter,\n    Container, Pagination, PaginationItem, PaginationLink\n  } from 'reactstrap';\nimport CustomTable from \"./common/CustomTable.jsx\";\nimport { ResponsiveContainer,LineChart, Line, XAxis, YAxis, CartesianGrid, PieChart, Pie, Cell } from 'recharts';\nimport IndividualSensors from './IndividualSensor.jsx';\nimport { Link } from \"react-router-dom\";\nimport warehouseJSON from './mock_data/warehouse';\nimport customerJson from './mock_data/customer.js';\n\nclass Warehouse extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            warehouseId: this.props.location.state ?\n            this.props.location.state.warehouseId : null,\n            warehouseName: this.props.location.state ?\n            this.props.location.state.name : \"\",\n            chart_data: [],\n            addSensorModal: false,\n            manageSensorModal: false,\n            manageOrderModal: false,\n            isOpen: false,\n            addSensor : {\n                sensorType: \"temperature\"\n            },\n            manageSensor : {\n                sensorType: \"temperature\"\n            },\n            individualSensorId: null,\n            selectedSensor: false,\n            orderHistory: warehouseJSON[0].history,\n            deleteToggle: false,\n            perPage: 5\n        }\n    }\n\n    componentDidMount() {\n        // console.log(this.props.location.state.warehouseId);\n        console.log(this.state.warehouseId);\n\n        // make call to grab all sensor data from the selected warehouse\n        // default detailed warehouse is first on the list \n    }\n\n    orderTablePagination(index) {\n        // organize order table pagination\n        const pageCount = Math.ceil(customerJson[0].warehouses[0].sensor[index].history.length / this.state.perPage);\n        const pages = [];\n        let cnt = 1;\n        while (pageCount >= cnt) {\n            pages.push(<PaginationItem>\n                <PaginationLink >\n                        {cnt}\n                </PaginationLink>\n            </PaginationItem>);\n            cnt += 1;\n        }\n        return pages;\n    }\n\n    addSensorToggle = () => {\n        this.setState({\n            addSensorModal: !this.state.addSensorModal\n        });\n    }\n\n    addSensorSubmit = (e) => {\n        // add sensor\n        e.preventDefault();\n        console.log(\"Adding sensors..\");\n    }\n\n    manageSensorToggle = () => {\n        this.setState({\n            manageSensorModal: !this.state.manageSensorModal\n        });\n    }\n    manageOrderToggle = () => {\n        this.setState({\n            manageOrderModal: !this.state.manageOrderModal\n        });\n    }\n\n    grabAllSensor() {\n        // call individual warehouse for all sensors\n    }\n\n    handleRowClick = (e, r) => {\n        // handle clicking a row\n        console.log(e.target, r);\n        // condition check to see if row is for individual warehouse or for everything\n        // clicking orders won't do anything\n    }\n\n    handleAddSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            addSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    handleManageSensorChange = (e) => {\n        console.log(e.target.value);\n        this.setState({\n            manageSensor: {\n                sensorType: e.target.value\n            }\n        });\n    }\n\n    manageIndividualSensor = () => {\n        this.setState({\n            selectedSensor: !this.state.selectedSensor\n        });\n    }\n\n    deleteSensorToggle = () => {\n        this.setState({\n            deleteToggle: !this.state.deleteToggle\n        });\n    }\n\n    renderCustomizedLabel = ({\n        cx, cy, midAngle, innerRadius, outerRadius, percent, index,\n      }) => {\n        const RADIAN = Math.PI / 180;\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n        const x = cx + radius * Math.cos(-midAngle * RADIAN);\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\n      \n        return (\n          <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n            {`${(percent * 100).toFixed(0)}%`}\n          </text>\n        );\n    }\n\n    render() {\n        const pieData = [\n            { name: 'Group A', value: 400 },\n            { name: 'Group B', value: 300 },\n            { name: 'Group C', value: 300 },\n            { name: 'Group D', value: 200 },\n          ];\n        const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n        const pages = [1, 2, 3];\n        return(\n                <Container className=\"pb-5\" fluid={true}>\n                <Row className=\"justify-content-md-center pt-4 pb-4\">\n                    <Col md=\"2\">\n                    <h2>Warehouse {this.state.warehouseName}</h2>\n                    </Col>\n                    <Col md=\"2\">\n                        <Button color=\"primary\" onClick={this.addSensorToggle}>Add Sensor</Button>{' '}\n                        <Link className=\"btn btn-info\" to=\"/\">Go Back</Link>\n                    </Col>\n                </Row>\n                <Row>\n                    {\n                        customerJson[0].warehouses[0].sensor.map((sen, index) => {\n                            let header = [];\n                            let range = [0, 100];\n                            if (sen.type === \"temperature\") {\n                                header = [\"Time\", \"Temperature\"];\n                            } else if (sen.type === \"uv\") {\n                                header = [\"Time\", \"UV Index\"];\n                                range = [0, 10];\n                            } else if (sen.type === \"humidity\") {\n                                header = [\"Time\", \"Concentration\"];\n                            }\n\n                            const chart_data = [];\n                            sen.history.forEach((dt) => {\n                                let tmp = {\"name\": \"\", \"generic\": \"\"};\n                                let x = dt[0].split(\"-\");\n                                tmp.name = x[1];\n                                tmp.generic = dt[1];\n                                chart_data.push(tmp);\n                            });\n                            \n                            return(\n                                <Col className=\"pb-4\" xs=\"auto\" md=\"4\">\n                                    <Card width=\"100%\">\n                            <CardBody>\n                                <CardTitle tag=\"h5\">{sen.name}</CardTitle>\n                                <ResponsiveContainer width='100%' height={300}>\n                                    <LineChart  data={chart_data}>\n                                        <Line type=\"monotone\" dataKey=\"generic\" stroke=\"#8884d8\" />\n                                        <CartesianGrid stroke=\"#ccc\" />\n                                        <XAxis dataKey=\"name\" />\n                                        <YAxis domain={range}/>\n                                    </LineChart>\n                                </ResponsiveContainer>\n                                <CustomTable \n                                    title=\"History\" \n                                    header={header} \n                                    trows={sen.history} \n                                    handleRowClick={this.handleRowClick}/>\n                                <Pagination>\n                                    <PaginationItem>\n                                        <PaginationLink first/>\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink previous />\n                                    </PaginationItem>\n                                    {\n                                        this.orderTablePagination(index)\n                                    }\n                                    <PaginationItem>\n                                        <PaginationLink next />\n                                    </PaginationItem>\n                                    <PaginationItem>\n                                        <PaginationLink last />\n                                    </PaginationItem>\n                                </Pagination>\n                                <Button color=\"primary\" onClick={this.manageSensorToggle}>Manage Sensor</Button>{' '}\n                                <Button color=\"danger\" onClick={this.deleteSensorToggle}>Delete</Button>\n                            </CardBody>\n                        </Card>\n                                </Col>\n                            );\n                        })\n                    }\n                     <Col className=\"pb-4\" md=\"auto\">\n                         <Card width='100%'>\n                             <CardBody >\n                                 <CardTitle tag=\"h5\">Orders Summary</CardTitle>\n                                 <ResponsiveContainer width='100%' height={300}>\n                                 <PieChart width={400} height={400}>\n                                     <Pie\n                                     data={pieData}\n                                     cx={200}\n                                     cy={150}\n                                     labelLine={false}\n                                     label={this.renderCustomizedLabel}\n                                     outerRadius={80}\n                                     fill=\"#8884d8\"\n                                     dataKey=\"value\"\n                                     >\n                                     {\n                                         pieData.map((entry, index) => \n                                         <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} \n                                         />)\n                                     }\n                                     </Pie>\n                                 </PieChart>\n                                 </ResponsiveContainer>\n                                 <Table>\n                                     <thead>\n                                         <tr>\n                                             <td>Order#</td>\n                                             <td>Type</td>\n                                             <td>Origin</td>\n                                             <td>Destination</td>\n                                         </tr>\n                                     </thead>\n                                     <tbody>\n                                         <tr>\n                                             <td>1</td>\n                                             <td>Corn</td>\n                                             <td>San Francsico</td>\n                                             <td>Las Vegas</td>\n                                         </tr>\n                                         <tr>\n                                             <td>2</td>\n                                             <td>Fruit</td>\n                                             <td>San Francsico</td>\n                                             <td>New York</td>\n                                         </tr>\n                                         <tr>\n                                             <td>3</td>\n                                             <td>Fruit</td>\n                                             <td>San Francsico</td>\n                                             <td>Seattle</td>\n                                         </tr>\n                                         <tr>\n                                             <td>4</td>\n                                             <td>Food</td>\n                                             <td>San Francsico</td>\n                                             <td>Miami</td>\n                                         </tr>\n                                     </tbody>\n                                 </Table>\n                                 <Pagination aria-label=\"Page navigation example\">\n                                     <PaginationItem>\n                                         <PaginationLink first onClick={()=> {console.log(\"load first\")}}/>\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink previous />\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink >\n                                         1\n                                         </PaginationLink>\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink >\n                                         2\n                                         </PaginationLink>\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink >\n                                         3\n                                         </PaginationLink>\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink next />\n                                     </PaginationItem>\n                                     <PaginationItem>\n                                         <PaginationLink last />\n                                     </PaginationItem>\n                                 </Pagination>\n                             </CardBody>\n                         </Card>\n                     </Col>\n                </Row>\n\n                <Modal isOpen={this.state.addSensorModal} toggle={this.addSensorToggle}>\n                    <ModalHeader toggle={this.addSensorToggle}>Add Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.addSensorSubmit}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\" id=\"exampleSelect\" \n                                value={this.state.addSensor.sensorType} \n                                onChange={this.handleAddSensorChange}>\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                </Input>\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" onClick={this.addSensorToggle}>Submit</Button>{' '}\n                                <Button color=\"danger\" onClick={this.addSensorToggle}>Cancel</Button>\n                            </ModalFooter>\n                        </Form>\n                    </ModalBody>        \n                </Modal>\n\n                <Modal isOpen={this.state.manageSensorModal} toggle={this.manageSensorToggle}>\n                    <ModalHeader toggle={this.manageSensorToggle}>Manage Sensor</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.manageIndividualSensor}>\n                            <FormGroup>\n                                <Label for=\"exampleEmail\">Sensor Name</Label>\n                                <Input type=\"email\" name=\"email\" id=\"exampleEmail\" placeholder=\"Sensor #1\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examplePassword\">Location</Label>\n                                <Input type=\"password\" name=\"password\" id=\"examplePassword\" placeholder=\"Second Floor\" />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Sensor Type</Label>\n                                <Input type=\"select\" name=\"select\">\n                                    <option value=\"temperature\">Temperature</option>\n                                    <option value=\"humidity\">Humidity</option>\n                                    <option value=\"uv\">UV</option>\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Action</Label>\n                                <Input type=\"select\" name=\"select\">\n                                    <option value=\"on\">Turn On</option>\n                                    <option value=\"off\">Turn Off</option>\n                                    <option value=\"maintain\">Maintenance</option>\n                                </Input>\n                            </FormGroup>\n                            <ModalFooter>\n                                <Button color=\"primary\" type=\"submit\" >Update</Button>{' '}\n                                <Button color=\"danger\" onClick={this.manageSensorToggle}>Cancel</Button>\n                    </ModalFooter> \n                        </Form>\n                    </ModalBody>  \n                </Modal>\n\n                <Modal isOpen={this.state.deleteToggle} toggle={this.deleteSensorToggle}>\n                    <ModalHeader toggle={this.deleteSensorToggle}>Are you sure?</ModalHeader>\n                    <ModalBody>\n                        <p>Deleting sensor will remove it from the network.</p>\n                    </ModalBody> \n                        <ModalFooter>\n                                <Button color=\"primary\" onClick={() => {console.log(\"deleted!\")}} >Continue</Button>{' '}\n                                <Button color=\"danger\" onClick={this.deleteSensorToggle}>Cancel</Button>\n                    </ModalFooter> \n                </Modal>\n            </Container>\n        );\n    }\n}\n\nexport default Warehouse;","import React from 'react';\nimport Dashboard from './Dashboard.jsx';\nimport Layout from './common/Layout.jsx';\nimport InfraDashboard from './InfraManager/InfraDashboard.jsx';\nimport InfraWarehouse from './InfraManager/InfraWarehouse.jsx';\nimport SupportDashboard from './IOTSupport/SupportDashboard.jsx';\nimport SupportWarehouse from './IOTSupport/SupportWarehouse.jsx';\nimport Profile from './Profile.jsx';\nimport Warehouse from './Warehouse.jsx';\n\nimport {\n    BrowserRouter as Router,\n    HashRouter,\n    Route,\n    Switch\n  } from \"react-router-dom\";\n\nexport default class LoggedInRoutes extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(this.props);\n    }\n\n    checkRoles() {\n        if (localStorage.getItem(\"user\") == \"support\") {\n            return \"support\";\n        } else if (localStorage.getItem(\"user\") == \"manager\") {\n            return \"manager\";\n        } else {\n            return \"supplier\";\n        }\n    }\n\n    render() {\n        // conditional check to direct to correct dashboard\n        return (\n            <Layout>\n                <Switch>\n                    <Route path=\"/profile\" component={Profile} />\n                    <Route path=\"/warehouse\" component={Warehouse} />\n                    <Route path=\"/support_warehouse\" component={SupportWarehouse} />\n                    <Route path=\"/manager_warehouse\" component={InfraWarehouse} />\n                   \n                    <Route path=\"/\"\n                        render={props => {\n                            if (this.checkRoles() === \"support\") {\n                                return <SupportDashboard />;\n                            } else if (this.checkRoles() === \"manager\") {\n                                return <InfraDashboard />;\n                            } else {\n                                return <Dashboard />;\n                            }\n                        }} />\n                </Switch>\n            </Layout>\n        );\n    }\n}","import React from 'react';\nimport {withRouter, Link} from 'react-router-dom'; \nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button, Row\n  } from 'reactstrap';\n  \n\n\nclass Login extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            pass: ''\n        }\n    }\n\n    handleChange = (e) => {\n        console.log(\"handle change\", e);\n        if (e.target.name === 'username') {\n            this.setState({\n                'username': e.target.value\n            });\n        } else {\n            this.setState({\n                'pass': e.target.value\n            });\n        }\n\n    }\n    submitLogin = (e) => {\n        const json = {\n            'support': '1234',\n            'manager': '1234',\n            'supplier': '1234'\n        }\n        // run authentication\n        e.preventDefault();\n        if (json[this.state.username] === this.state.pass) {\n            if (this.state.username === 'support') {\n                localStorage.setItem('user', 'support');\n            } else if (this.state.username === 'manager') {\n                localStorage.setItem('user', 'manager');\n            } else {\n                localStorage.setItem('user', 'supplier');\n            }\n            console.log(\"redirect...\");\n            this.props.history.push(\"/\");\n        }\n    }\n\n    render () {\n        return(\n            <div className=\"App\">\n                <Container>\n                    <Row className=\"pt-5 justify-content-center\">\n                    <h2>SupplyChain Login</h2>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                    <Form className=\"pt-4 pb-4 pr-5 pl-5 border\" onSubmit={this.submitLogin}>\n                        <Col>\n                            <FormGroup>\n                                <Label>Username/Email</Label>\n                                <Input \n                                    type=\"username\"\n                                    name=\"username\"\n                                    placeholder=\"email@email.com\"\n                                    value={this.state.username || ''}\n                                    onChange={this.handleChange}\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col>\n                            <FormGroup>\n                            <Label for=\"exPassword\">Password</Label>\n                            <Input\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"exPassword\"\n                                placeholder=\"*******\"\n                                value={this.state.pass || ''}\n                                onChange={this.handleChange}\n                            />\n                            </FormGroup>\n                        </Col>\n                        <Button color=\"primary\" type=\"submit\">Submit</Button>\n                        <p className=\"pt-2\">Don't have a account yet?<Link to=\"/register\">Sign up!</Link></p>\n                    </Form>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Login);","import React from 'react';\nimport {withRouter, Link} from 'react-router-dom'; \nimport {\n    Container, Col, Form,\n    FormGroup, Label, Input,\n    Button, Row, \n  } from 'reactstrap';\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n            username: \"\",\n            password: \"\",\n            role: \"Supplier\"\n        }\n    }\n\n    handleChange = (e) => {\n        console.log(\"handle change\", e);\n        if (e.target.name === 'username') {\n            this.setState({\n                'username': e.target.value\n            });\n        } else {\n            this.setState({\n                'pass': e.target.value\n            });\n        }\n\n    }\n    registerSubmit = (e) => {\n        // save user to the backend\n        e.preventDefault();\n        console.log(\"redirect...\");\n        this.props.history.push(\"/login\");\n    }\n    render() {\n        return(\n            <div className=\"App\">\n              <Container>\n\n            <Row className=\"pt-5 justify-content-center\">\n            <h2>SupplyChain Register</h2>\n            </Row>\n            <Form className=\"pl-5 pr-5 border login-form\" onSubmit={this.registerSubmit}>\n              {/* <Container className=\"login-border\"> */}\n                <Col className=\"pb-4 font-weight-bold\">\n                  <FormGroup>\n                    <Label for=\"name\">Name</Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                      value={this.state.name}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"email\">Email</Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      value={this.state.email}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"username\">Username</Label>\n                    <Input\n                      type=\"text\"\n                      name=\"username\"\n                      placeholder=\"Username\"\n                      value={this.state.username}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"password\">Password</Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder=\"Password\"\n                      value={this.state.password}\n                      onChange={this.handleChange}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label for=\"role\">Role</Label>\n                    <Input\n                      type=\"select\"\n                      name=\"role-select\"\n                      value={this.state.role}\n                      onChange={this.handleChange}\n                    >\n                        <option>Supplier</option>\n                        <option>Infrastructure Manager</option>\n                        <option>IOT Support</option>\n                    </Input>\n                  </FormGroup>\n                  <Button color=\"primary\" type=\"submit\">Register</Button>{' '}\n                  <Link className=\"btn btn-danger\" to=\"/\">Cancel</Link>\n                </Col>\n              {/* </Container> */}\n            </Form>\n</Container>\n          </div>\n        )\n    }\n}\n\nexport default withRouter(Register);","import './App.css';\nimport React from 'react';\nimport LoggedInRoutes from './LoggedInRoutes.jsx';\nimport Login from './Login.jsx';\nimport Register from './Register.jsx';\nimport { createBrowserHistory } from 'history';\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  isLoggedIn() {\n    return localStorage.getItem(\"user\") != null;\n  }\n\n  checkRoles() {\n    if (localStorage.getItem(\"user\") == \"support\") {\n      return \"support\";\n    } else if (localStorage.getItem(\"user\") == \"manager\") {\n      return \"manager\";\n    } else {\n      return \"supplier\";\n    }\n  }\n\n  render() {\n    let history = createBrowserHistory();\n    return (\n      <HashRouter forceRefresh={true} history={history}>\n        <Switch>\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/\"\n                    render={props => {\n                        if (this.isLoggedIn()) {\n                            return <LoggedInRoutes {...props} />;\n                        } else {\n                            return <Redirect to=\"/login\"/>;\n                        }\n                    }} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}